{"backend_state":"running","connection_file":"/projects/7c08c135-501d-4a5d-8ef1-fb9399dd6cfe/.local/share/jupyter/runtime/kernel-4084216a-7cf5-47cb-95a9-63a86c844ec0.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1659545097132,"exec_count":1,"id":"c1cee0","input":"import pandas as pd\nimport plotly.express as px\nimport numpy as np\nimport math\nfrom matplotlib import pyplot as plt\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LassoCV","kernel":"python3-ubuntu","no_halt":true,"pos":0,"start":1659545096488,"state":"done","type":"cell"}
{"cell_type":"code","end":1659545097162,"exec_count":2,"id":"e1ecd0","input":"df = pd.read_csv('CO2 Emissions_Canada.csv')","kernel":"python3-ubuntu","no_halt":true,"pos":1,"start":1659545097147,"state":"done","type":"cell"}
{"cell_type":"code","end":1659545097187,"exec_count":3,"id":"62a974","input":"df.head()","kernel":"python3-ubuntu","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS5</td>\n      <td>Z</td>\n      <td>9.9</td>\n      <td>6.7</td>\n      <td>8.5</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>M6</td>\n      <td>Z</td>\n      <td>11.2</td>\n      <td>7.7</td>\n      <td>9.6</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>AV7</td>\n      <td>Z</td>\n      <td>6.0</td>\n      <td>5.8</td>\n      <td>5.9</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.7</td>\n      <td>9.1</td>\n      <td>11.1</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.1</td>\n      <td>8.7</td>\n      <td>10.6</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Vehicle Class  Engine Size(L)  Cylinders Transmission  \\\n0  ACURA         ILX       COMPACT             2.0          4          AS5   \n1  ACURA         ILX       COMPACT             2.4          4           M6   \n2  ACURA  ILX HYBRID       COMPACT             1.5          4          AV7   \n3  ACURA     MDX 4WD   SUV - SMALL             3.5          6          AS6   \n4  ACURA     RDX AWD   SUV - SMALL             3.5          6          AS6   \n\n  Fuel Type  Fuel Consumption City (L/100 km)  \\\n0         Z                               9.9   \n1         Z                              11.2   \n2         Z                               6.0   \n3         Z                              12.7   \n4         Z                              12.1   \n\n   Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n0                              6.7                               8.5   \n1                              7.7                               9.6   \n2                              5.8                               5.9   \n3                              9.1                              11.1   \n4                              8.7                              10.6   \n\n   Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           33                  196  \n1                           29                  221  \n2                           48                  136  \n3                           25                  255  \n4                           27                  244  "},"exec_count":3}},"pos":2,"start":1659545097168,"state":"done","type":"cell"}
{"cell_type":"code","end":1659545097225,"exec_count":5,"id":"025f92","input":"#df = df.drop(columns = ['Make', 'Model', 'Vehicle Class','Engine Size(L)', 'Cylinders', 'Transmission', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)', 'Fuel Consumption Comb (mpg)'])\ndf = df.drop(columns = ['Vehicle Class','Engine Size(L)', 'Cylinders', 'Transmission', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)', 'Fuel Consumption Comb (mpg)'])\ndf.head()\n\n#df.loc[df['Make'] == 'BUICK', 'Model'].unique()\n#df[\"Make\"].unique()","kernel":"python3-ubuntu","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Fuel Type</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>Z</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>Z</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>Z</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>Z</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>Z</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Fuel Type  CO2 Emissions(g/km)\n0  ACURA         ILX         Z                  196\n1  ACURA         ILX         Z                  221\n2  ACURA  ILX HYBRID         Z                  136\n3  ACURA     MDX 4WD         Z                  255\n4  ACURA     RDX AWD         Z                  244"},"exec_count":5}},"pos":3,"start":1659545097205,"state":"done","type":"cell"}
{"cell_type":"code","end":1659545097240,"exec_count":6,"id":"db169a","input":"#from sklearn.model_selection import train_test_split\n\n#col_category = ['Make', 'Model', 'Fuel Type']\n#for col in col_category:\n#    df= pd.concat([df.drop(col, axis=1), pd.get_dummies(df[col], prefix=col, prefix_sep='_')], axis=1)\n# define the input_columns and target variables\n#input_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\n#target = df[\"CO2 Emissions(g/km)\"]\n#x_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","kernel":"python3-ubuntu","no_halt":true,"pos":4,"start":1659545097231,"state":"done","type":"cell"}
{"cell_type":"code","end":1659545097248,"exec_count":7,"id":"db793a","input":"#from sklearn.model_selection import GridSearchCV\n#from sklearn.model_selection import RepeatedKFold\n\n#SVR parameters\n#n_alphas = [10, 100, 200]\n#max_iter = [50, 1000, 2000]\n#eps = [1e-1, 1e-2, 1e-4]\n#grid = dict(n_alphas=n_alphas, max_iter=max_iter, eps=eps)\n#MODEL=LassoCV()\n# parameter saved in a dictionary\n\n#PARAMETER = {'n_alphas': [10, 100, 200],\n#             'max_iter': [50, 1000, 2000],\n#             'eps': [1e-1, 1e-2, 1e-4]}\n# implement grid search cv\n#cvFold = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n#gs_lasso = GridSearchCV(estimator=MODEL, param_grid=grid, n_jobs=-1, cv=cvFold, scoring=\"neg_mean_squared_error\")\n# fit the models\n#gs_res = gs_lasso.fit(x_train, y_train)\n# print out the best parameter\n#print(gs_res.best_params_)","kernel":"python3-ubuntu","no_halt":true,"pos":5,"start":1659545097243,"state":"done","type":"cell"}
{"cell_type":"code","end":1659545097258,"exec_count":8,"id":"7c03a3","input":"# save the model into a variable\n#lasso = LassoCV(n_alphas= 20, max_iter= 3000, eps= 0.0001)\n# fit the model\n#lasso.fit(x_train, y_train)\n# predict the value: for the predict, just use the x_test\n# the predict function will be using our testing dataset to predict our co2 emission\n#y_hat = lasso.predict(x_test)\n\n#lasso.score(x_test, y_test)","kernel":"python3-ubuntu","no_halt":true,"pos":6,"start":1659545097251,"state":"done","type":"cell"}
{"cell_type":"code","end":1659545097284,"exec_count":9,"id":"d8549d","input":"#calculate MSE\n#total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\n#mean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \n#print(mean_squared_error)\n\n#calculate RMSE\n#rmse = math.sqrt(mean_squared_error)\n#print(rmse)\n\n# normalize it\n#normrmse = rmse/(max(df['CO2 Emissions(g/km)'])-min(df['CO2 Emissions(g/km)']))\n#print(normrmse)","kernel":"python3-ubuntu","no_halt":true,"pos":7,"start":1659545097269,"state":"done","type":"cell"}
{"cell_type":"code","id":"b70084","input":"","pos":8,"type":"cell"}
{"exec_count":4,"id":"0e06df","input":"#df.loc[df['Make'] == 'VOLVO', 'Model'].unique()\ndf['Fuel Type'].unique()","kernel":"python3-ubuntu","no_halt":true,"output":{"0":{"data":{"text/plain":"array(['COMPACT', 'SUV - SMALL', 'MID-SIZE', 'TWO-SEATER', 'MINICOMPACT',\n       'SUBCOMPACT', 'FULL-SIZE', 'STATION WAGON - SMALL',\n       'SUV - STANDARD', 'VAN - CARGO', 'VAN - PASSENGER',\n       'PICKUP TRUCK - STANDARD', 'MINIVAN', 'SPECIAL PURPOSE VEHICLE',\n       'STATION WAGON - MID-SIZE', 'PICKUP TRUCK - SMALL'], dtype=object)"},"exec_count":4}},"pos":2.5,"state":"done","type":"cell"}
{"id":0,"time":1659536010942,"type":"user"}
{"last_load":1659536015058,"type":"file"}