{"backend_state":"running","connection_file":"/projects/7c08c135-501d-4a5d-8ef1-fb9399dd6cfe/.local/share/jupyter/runtime/kernel-1e2156bf-01c6-4575-8845-88088bc4e4c0.json","kernel":"elastic-searchers","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1659709227861,"exec_count":8,"id":"c13883","input":"import pandas as pd\nimport plotly.express as px\nimport numpy as np\nfrom matplotlib import pyplot as plt\n","kernel":"elastic-searchers","pos":1,"start":1659709227828,"state":"done","type":"cell"}
{"cell_type":"code","end":1659709231012,"exec_count":9,"id":"0081c8","input":"df = pd.read_csv('CO2 Emissions_Canada.csv')","kernel":"elastic-searchers","pos":5,"start":1659709230970,"state":"done","type":"cell"}
{"cell_type":"code","end":1659709265553,"exec_count":12,"id":"d01cc4","input":"df.columns=['CO2 Emissions(g/km)']\nprint(df)","kernel":"elastic-searchers","output":{"0":{"ename":"ValueError","evalue":"Length mismatch: Expected axis has 12 elements, new values have 1 elements","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [12]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCO2 Emissions(g/km)\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(df)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/generic.py:5588\u001b[0m, in \u001b[0;36mNDFrame.__setattr__\u001b[0;34m(self, name, value)\u001b[0m\n\u001b[1;32m   5586\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   5587\u001b[0m     \u001b[38;5;28mobject\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__getattribute__\u001b[39m(\u001b[38;5;28mself\u001b[39m, name)\n\u001b[0;32m-> 5588\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mobject\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__setattr__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   5589\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m:\n\u001b[1;32m   5590\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/_libs/properties.pyx:70\u001b[0m, in \u001b[0;36mpandas._libs.properties.AxisProperty.__set__\u001b[0;34m()\u001b[0m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/generic.py:769\u001b[0m, in \u001b[0;36mNDFrame._set_axis\u001b[0;34m(self, axis, labels)\u001b[0m\n\u001b[1;32m    767\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_set_axis\u001b[39m(\u001b[38;5;28mself\u001b[39m, axis: \u001b[38;5;28mint\u001b[39m, labels: Index) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    768\u001b[0m     labels \u001b[38;5;241m=\u001b[39m ensure_index(labels)\n\u001b[0;32m--> 769\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mset_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    770\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_clear_item_cache()\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/internals/managers.py:214\u001b[0m, in \u001b[0;36mBaseBlockManager.set_axis\u001b[0;34m(self, axis, new_labels)\u001b[0m\n\u001b[1;32m    212\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mset_axis\u001b[39m(\u001b[38;5;28mself\u001b[39m, axis: \u001b[38;5;28mint\u001b[39m, new_labels: Index) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    213\u001b[0m     \u001b[38;5;66;03m# Caller is responsible for ensuring we have an Index object.\u001b[39;00m\n\u001b[0;32m--> 214\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_set_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnew_labels\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    215\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes[axis] \u001b[38;5;241m=\u001b[39m new_labels\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/internals/base.py:69\u001b[0m, in \u001b[0;36mDataManager._validate_set_axis\u001b[0;34m(self, axis, new_labels)\u001b[0m\n\u001b[1;32m     66\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[1;32m     68\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m new_len \u001b[38;5;241m!=\u001b[39m old_len:\n\u001b[0;32m---> 69\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m     70\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLength mismatch: Expected axis has \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mold_len\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m elements, new \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     71\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalues have \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnew_len\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m elements\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     72\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Length mismatch: Expected axis has 12 elements, new values have 1 elements"]}},"pos":7,"start":1659709265480,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"058f73","input":"","pos":27,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"05bd56","input":"from sklearn.metrics import mean_squared_error\n\n\n'''\ntotal_squared_error = (np.sum((y_test1 - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test1) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n\nNormalized RMSE = RMSE / (max value â€“ min value)\n'''\nrmse=mean_squared_error(y_test1, y_hat1, squared=False)\nprint(rmse)\nNRMSE=rmse/(max(df['CO2 Emissions(g/km)'])-min(df['CO2 Emissions(g/km)']))\nprint(NRMSE)","pos":101,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0848eb","input":"fig, ax = plt.subplots(figsize=(30, 30))\nxgb.plot_tree(my_model, num_trees=2, ax=ax)\nplt.gcf().set_size_inches(15, 10.5)\nplt.show()","pos":58,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0cd541","input":"","pos":70,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"135cd3","input":"","pos":118,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"14c959","input":"# :0 it seems like our data points are linear? yeah! so thats probably why we have high score. linear regression or other linear model might work well we can see other people's result great job ameya : D\n# yea i dont think random forest is the best for our scenario\n# yea \n\nplt.scatter(y_test,y_hat, s=0.1, c='red')\nplt.xlabel('CO2 emission', fontsize = 30)\nplt.ylabel('Estimate', fontsize = 30)\nplt.grid('on')\nplt.plot([100,800], [100,800])\nplt.show()","pos":72,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1500ff","input":"#I tried to run this but for some reason its taking forever to run so probably need some fixing with this. Probably delete all the parameters in the gridsearch function\n#I also got all this code from https://pyimagesearch.com/2021/05/17/introduction-to-hyperparameter-tuning-with-scikit-learn-and-python/\n\n'''\n##Import packages\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RepeatedKFold\n\n#SVR parameters\nkernel = [\"linear\", \"rbf\", \"sigmoid\", \"poly\"]\ntolerance = [1e-3, 1e-4, 1e-5, 1e-6]\nC = [1, 1.5, 2, 2.5, 3]\ngrid = dict(kernel=kernel, tol=tolerance, C=C)\nMODEL=SVR()\n# parameter saved in a dictionary\n\nPARAMETER = {'kernel' : [\"linear\", \"rbf\", \"sigmoid\", \"poly\"],\n             'tolerance': [1e-3, 1e-4, 1e-5, 1e-6],\n             'C': [1, 1.5, 2, 2.5, 3]}\n# implement grid search cv\ncvFold = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\ngs_SVR = GridSearchCV(estimator=MODEL, param_grid=grid, n_jobs=-1, cv=cvFold, scoring=\"neg_mean_squared_error\")\n# fit the models\ngs_res = gs_SVR.fit(x_train1, y_train1)\n# print out the best parameters\nprint(gs_res.best_params_)\n'''\n\n#update: ran the code and got this result: {'C': 3, 'kernel': 'rbf', 'tol': 1e-06} Took 17 min to run lol","pos":107,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"180d5c","input":"","pos":121,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1893fa","input":"","pos":104,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1f1fbb","input":"df.columns","pos":116,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2420ac","input":"y_hat","pos":62,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2521f4","input":"","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"288d91","input":"#Ameya\n#Shows all the cars that emmit more than 500g/km if CO2\ndf[df [\"CO2 Emissions(g/km)\"] >=500]","pos":41,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2ad492","input":"# https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html\ngrid_params_ridge = { 'alpha' : [2,5],\n                    'fit_intercept' : [True, False],\n                    'normalize' : [True, False]}\ngs_ridge = GridSearchCV(RidgeCV(), grid_params_ridge)\ngs_ridge_res = gs_ridge.fit(x_train, y_train)\nprint(gs_ridge_res.best_params_)","pos":114,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2b723d","input":"","pos":105,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2bcda1","input":"from sklearn.model_selection import train_test_split\ncol_category = ['Make', 'Model', 'Vehicle Class', 'Transmission', 'Fuel Type']\nfor col in col_category:\n    df = pd.concat([df.drop(col, axis=1), pd.get_dummies(df[col], prefix=col, prefix_sep='_')], axis=1)\n# define the input_columns and target variables\ninput_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\ntarget = target = df[\"CO2 Emissions(g/km)\"]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2fe288","input":"","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"410a32","input":"type(y_test['CO2 Emissions(g/km)'])","pos":63,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"448fca","input":"# Yukta\n# Shows vehicles using diesel (D on graph)\ndfd = df[df[\"Fuel Type\"] == \"D\"]\ndfd","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"49a20b","input":"","pos":73,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4dd44f","input":"","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"67e9c2","input":"import matplotlib\nimport xgboost as xgb","pos":59,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"689df6","input":"","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"696f4d","input":"","pos":74,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6d5a32","input":"#Fit Model\nmodel.fit(x_train1, y_train1)\n#predict\ny_hat1=model.predict(x_test1)\n#Score\nmodel.score(x_test1, y_test1)","pos":100,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"74a776","input":"estimator.feature_names_in_","pos":67,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"76d798","input":"from sklearn.datasets import load_iris\niris = load_iris()\niris","pos":68,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"787d29","input":"","pos":108,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"83b4a8","input":"# skeleton code\n\n# parameter saved in a dictionary\nPARAMETER = { PARAMETER1 : [],\n              PARAMETER2 : [],\n              PARAMETER3 : []}\n# implement grid search cv\ngs = GridSearchCV(MODEL, PARAMETER)\n# fit the models\ngs_res = gs.fit(x_train, y_train)\n# print out the best parameters\nprint(gs_res.best_params_)\n\n# example\ngrid_params_knn = { 'n_neighbors' : [50, 100, 150, 200, 250, 300],\n                    'weights' : ['uniform','distance'],\n                    'metric' : ['minkowski','euclidean','manhattan']}\ngs_knn = GridSearchCV(KNeighborsClassifier(), grid_params_knn)\ngs_knn_res = gs_knn.fit(x_train, y_train)\nprint(gs_knn_res.best_params_)","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"865f98","input":"","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8879d7","input":"#Michael XGBoost\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\n# define the input_columns and target variables\ninput_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\ntarget = target = df[\"CO2 Emissions(g/km)\"]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)\n\ncol_category = ['Make', 'Model', 'Vehicle Class', 'Transmission', 'Fuel Type']\nfor col in col_category:\n    df = pd.concat([df.drop(col, axis=1), pd.get_dummies(df[col], prefix=col, prefix_sep='_')], axis=1)","pos":55,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8b31cd","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8f935c","input":"xgb.plot_tree(my_model, num_trees=2)\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(200, 300)\nfig.savefig('tree.png')","pos":60,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8f9a8e","input":"y_hat = ridge.predict(x_test)","pos":112,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"92a635","input":"","pos":96,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"92ada5","input":"# perhaps normalized the mean squared error as other models also have score over 1\n# you can google root mean square error or refer to these articles: https://www.statology.org/what-is-a-good-rmse/","pos":106,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"930182","input":"import xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error\n\n# https://stackoverflow.com/questions/71996617/invalid-classes-inferred-from-unique-values-of-y-expected-0-1-2-3-4-5-got\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny_train = le.fit_transform(y_train)\n\n# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html\nXGB_estimator = XGBRegressor(\n    objective= 'binary:logistic',\n    nthread=4,\n    seed=42\n)\n\nXGB_parameters = {\n    'max_depth': range (2, 10, 1),\n    'n_estimators': range(60, 220, 40),\n    'learning_rate': [0.1, 0.01, 0.05]\n}\n\ngrid_search = RandomizedSearchCV(\n    estimator=XGBRegressor(),\n    param_distributions = XGB_parameters,\n    #scoring = 'roc_auc',\n    n_jobs = 10,\n    cv = 10,\n    verbose=True\n)\n#my_model = XGBRegressor()\n#my_model.fit(x_train, y_train, verbose=1, )\ngrid_search.fit(x_train, y_train)\nprint(grid_search.best_estimator_)\n#y_hat = my_model.predict(x_test)\n\n#total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\n#mean_squared_err = total_squared_error/len(y_test) #divide this by how many rows/observations we have \n#print('Mean Squared Error: ', mean_squared_err)\n#MAE = np.mean(abs(y_test - y_hat[6]))\n#print('Mean Average Error: ', MAE)\n#print('SKLearn Score: ', my_model.score(x_train, y_train))\n#RMSE= mean_squared_error(y_test, y_hat, squared= False)\n#NRMSE= RMSE/(max(df[CO2 Emissions(g/km)])-min(df[CO2 Emissions(g/km)])\n#print('Root Mean Square Error: ', NRMSE)\n\n\n#xgb.plot_tree(my_model, num_trees=4)\n#plt.show()\n#XGBRegressor(learning_rate=0.05, max_depth=6, n_estimators=140)\n","pos":56,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"951200","input":"import xgboost as xgb\nfrom xgboost import plot_tree\nfrom xgboost import XGBRegressor\nmy_model = XGBRegressor(learning_rate=0.05, max_depth=3, n_estimators=140)\nnew_model = XGBRegressor()\nmy_model.fit(x_train, y_train, verbose=1)\ny_hat = my_model.predict(x_test)\n\n#total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\n#mean_squared_err = total_squared_error/len(y_test) #divide this by how many rows/observations we have \n#print('Mean Squared Error: ', mean_squared_err)\n#MAE = np.mean(abs(y_test - y_hat[6]))\n#print('Mean Average Error: ', MAE)\n#print('SKLearn Score: ', my_model.score(x_train, y_train))\n#RMSE=mean_squared_error(y_test, y_hat, squared=False)\n#NRMSE=RMSE/(max(df['CO2 Emissions(g/km)'])-min(df['CO2 Emissions(g/km)']))\n#print('Root Mean Square Error', NRMSE)\n#print (RMSE)\n\nfig, ax = plt.subplots(figsize=(30, 30))\nxgb.plot_tree(my_model, num_trees=2, ax=ax)\nplt.show()\n#xgb.plot_tree(model = new_model)\n#xgb.plot_tree(booster= new_model, num_trees= 0)\n#plt.show()","pos":57,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9728d9","input":"","pos":109,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"99ddaa","input":"","pos":102,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9ea87f","input":"#Desscriptions\n#1 - Your CO2 emission \n","pos":120,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9eb2e5","input":"","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a0b3e9","input":"","pos":75,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a0f6ea","input":"#yukta\nimport pandas as pd\nfrom numpy import arange\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import RepeatedKFold\n\n\n# i think we need to enter values greater than 0.0 for the alpha\n# https://www.statology.org/ridge-regression-in-python/ \n\n\n#data = pd.read_csv(\"CO2 Emissions_Canada.csv\")\n#X=data[\"Make\",\"Model\",\"Vehicle Class\",\"Engine Size(L)\",\"Cylinders,Transmission\",\"Fuel Type\",\"Fuel Consumption City (L/100 km)\",\"Fuel Consumption Hwy (L/100 km)\",\"Fuel #Consumption Comb (L/100 km)\",\"Fuel Consumption Comb (mpg)\"]\n#Y=data[\"CO2 Emissions(g/km)\"]\n\n\n\n\n#x_train, x_test, y_train, y_test\ncv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\nridge = RidgeCV(alphas=arange(0.00001, 1, 0.01), cv=cv, scoring='neg_mean_absolute_error')\nridge.fit(x_train, y_train)\nprint(ridge.alpha_)","pos":111,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a18181","input":"#Ameya\ndf[df [\"CO2 Emissions(g/km)\"] <=100]\n#Shows all cars that emmit less than 100g/km of CO2","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a48eb1","input":"","pos":71,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a97c13","input":"","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ac28e6","input":"# test\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LassoCV\n\n\ndfa2 = pd.read_csv('CO2 Emissions_Canada.csv')\ndfa2.drop([, 'Model', 'Vehicle Class', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)', 'Transmission', 'Engine Size(L)', 'Cylinders'], axis = 1, inplace = True)\ncol_category = ['Fuel Type']\nfor col in col_category:\n    dfa2 = pd.concat([dfa2.drop(col, axis=1), pd.get_dummies(dfa2[col], prefix=col, prefix_sep='_')], axis=1)\n                    ","pos":91,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ac8906","input":"","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ae0d7e","input":"# handle missing data or convert categorical data into dummy variables","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ae7a91","input":"total_squared_error = (np.sum((y_test['CO2 Emissions(g/km)'] - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_err = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint('Mean Squared Error: ', mean_squared_err)\nMAE = np.mean(abs(y_test - y_hat[6]))\nprint('Mean Average Error: ', MAE)\nprint('SKLearn Score: ', my_model.score(x_train, y_train))\nRMSE=mean_squared_error(y_test, y_hat, squared=False)\nNRMSE=RMSE/(max(df['CO2 Emissions(g/km)'])-min(df['CO2 Emissions(g/km)']))\nprint('Root Mean Square Error', NRMSE)","pos":61,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ba7d53","input":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import RepeatedKFold\n\n#SVR parameters\nn_alphas = [50, 100, 200]\nmax_iter = [500, 1000, 2000]\neps = [1e-3, 1e-2, 1e-4]\ngrid = dict(n_alphas=n_alphas, max_iter=max_iter, eps=eps)\nMODEL=LassoCV()\n# parameter saved in a dictionary\n\nPARAMETER = {'n_alphas': [50, 100, 200],\n             'max_iter': [500, 1000, 2000],\n             'eps': [1e-3, 1e-2, 1e-4]}\n# implement grid search cv\ncvFold = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\ngs_lasso = RandomizedSearchCV(estimator=MODEL, param_distributions=grid, n_jobs=-1, cv=cvFold, scoring=\"neg_mean_squared_error\")\n# fit the models\ngs_res = gs_lasso.fit(x_train, y_train)\n# print out the best parameter\nprint(gs_res.best_params_)","pos":78,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c5d430","input":"#https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html\n\nrf = RandomForestRegressor(max_depth = 3)\nrf.fit(x_train, y_train)\ny_hat_rf = rf.predict(x_test)\n\nrf.score(x_test, y_test)\n\ntotal_squared_error = (np.sum((y_test[\"CO2 Emissions(g/km)\"] - y_hat_rf)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \n\n# basically just that https://scikit-learn.org/stable/modules/generated/sklearn.tree.plot_tree.html\n# this is whats on sklearn page\n# i actually never graph random forest before so im not sure\n# but this is the code for decision tree, i will check whether we can use it for random forest\n#tree_model = tree.DecisionTreeClassifier(max_depth = 4)\n#tree_model.fit(x_train, y_train)\n#fig = plt.figure(figsize=(25,20))\n#tree_plot = tree.plot_tree(tree_model, feature_names=input_columns.columns, filled=True, fontsize=10)\n#tree_plot\n# i found this article: https://towardsdatascience.com/how-to-visualize-a-decision-tree-from-a-random-forest-in-python-using-scikit-learn-38ad2d75f21c\n\nRMSE=sqrt(mean_squared_error)\nprint(RMSE)\nNRMSE=RMSE/(max(df['CO2 Emissions(g/km)'])-min(df['CO2 Emissions(g/km)']))\nprint('Root Mean Square Error', NRMSE)\n\n\nfrom sklearn.tree import export_graphviz\n\nestimator = rf.estimators_[5]\n\nexport_graphviz(estimator, out_file='tree.dot',\n                rounded = True, proportion = False,\n                precision = 2, filled = True)\n\n# Convert to png using system command \nfrom subprocess import call\ncall(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])\n\n# Display in jupyter notebook\nfrom IPython.display import Image\nImage(filename = 'tree.png')\n","pos":66,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cab5c0","input":"#Ashley lasso linear regression\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LassoCV\n#input_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\n#target = target = df[\"CO2 Emissions(g/km)\"]\n#x_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)\n\n# save the model into a variable\nlasso = LassoCV()\n# fit the model\nlasso.fit(x_train, y_train)\n# predict the value: for the predict, just use the x_test\n# the predict function will be using our testing dataset to predict our co2 emission\ny_hat = lasso.predict(x_test)\n\nlasso.score(x_test, y_test)\n\n","pos":77,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cca819","input":"y_train","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cd070c","input":"#joseph","pos":98,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cf92d8","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cfe3a1","input":"","pos":51,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d3a472","input":"#import packages\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\n#Set up Data by splitting to Train:Test = 80:20 \nmodel=SVR(C=3, kernel= 'rbf', tol= 1e-06)\ninput_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\ntarget = df[\"CO2 Emissions(g/km)\"]\nx_train1, x_test1, y_train1, y_test1 = train_test_split(input_columns, target, test_size=0.2)","pos":99,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d5b3ae","input":"ridge.score(x_test, y_test)\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n#normalized root mean squared error","pos":113,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e15610","input":"#Ameya Randomn Forest\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\ncol_category = ['Make', 'Model', 'Vehicle Class', 'Transmission', 'Fuel Type']\nfor col in col_category:\n    df = pd.concat([df.drop(col, axis=1), pd.get_dummies(df[col], prefix=col, prefix_sep='_')], axis=1)\n\ninput_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\ntarget = df[[\"CO2 Emissions(g/km)\"]]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)\n","pos":65,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e5485a","input":"# Ashley - only shows vehicles using premium gasoline\ndfz = df[df[\"Fuel Type\"] == \"Z\"]","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e7d913","input":"","pos":117,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e8fba2","input":"","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e9c8ab","input":"","pos":50,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ece7cf","input":"","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f2f9c9","input":"iris.target_names","pos":69,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f8d314","input":"","pos":95,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fb2e59","input":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n#calculate MSE\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n\n#calculate RMSE\nrmse = sqrt(mean_squared_error)\nprint(rmse)\n\n# normalize it\nnormrmse = rmse/(max(df['CO2 Emissions(g/km)'])-min(df['CO2 Emissions(g/km)']))\nprint(normrmse)","pos":80,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fe7c19","input":"# Ashley - only shows vehicles using regular gasoline\ndfx = df[df[\"Fuel Type\"] == \"X\"]","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ff01f3","input":"","pos":103,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"bd130c","input":"df.isna().sum()","output":{"0":{"data":{"text/plain":"Make                                0\nModel                               0\nVehicle Class                       0\nEngine Size(L)                      0\nCylinders                           0\nTransmission                        0\nFuel Type                           0\nFuel Consumption City (L/100 km)    0\nFuel Consumption Hwy (L/100 km)     0\nFuel Consumption Comb (L/100 km)    0\nFuel Consumption Comb (mpg)         0\nCO2 Emissions(g/km)                 0\ndtype: int64"},"exec_count":10,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"5af0f1","input":"test = pd.read_csv('CO2 Emissions_Canada.csv')\ntest.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS5</td>\n      <td>Z</td>\n      <td>9.9</td>\n      <td>6.7</td>\n      <td>8.5</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>M6</td>\n      <td>Z</td>\n      <td>11.2</td>\n      <td>7.7</td>\n      <td>9.6</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>AV7</td>\n      <td>Z</td>\n      <td>6.0</td>\n      <td>5.8</td>\n      <td>5.9</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.7</td>\n      <td>9.1</td>\n      <td>11.1</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.1</td>\n      <td>8.7</td>\n      <td>10.6</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Vehicle Class  Engine Size(L)  Cylinders Transmission  \\\n0  ACURA         ILX       COMPACT             2.0          4          AS5   \n1  ACURA         ILX       COMPACT             2.4          4           M6   \n2  ACURA  ILX HYBRID       COMPACT             1.5          4          AV7   \n3  ACURA     MDX 4WD   SUV - SMALL             3.5          6          AS6   \n4  ACURA     RDX AWD   SUV - SMALL             3.5          6          AS6   \n\n  Fuel Type  Fuel Consumption City (L/100 km)  \\\n0         Z                               9.9   \n1         Z                              11.2   \n2         Z                               6.0   \n3         Z                              12.7   \n4         Z                              12.1   \n\n   Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n0                              6.7                               8.5   \n1                              7.7                               9.6   \n2                              5.8                               5.9   \n3                              9.1                              11.1   \n4                              8.7                              10.6   \n\n   Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           33                  196  \n1                           29                  221  \n2                           48                  136  \n3                           25                  255  \n4                           27                  244  "},"exec_count":11,"output_type":"execute_result"}},"pos":82,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"e32704","input":"# ashley correlation map","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"9f75cd","input":"# create plots for your data to understand the trend of data :D","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"05589f","input":"#yukta\nfig = px.scatter(df, x=\"Model\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", size= 'Engine Size(L)', title='CO2 Emissions by Model')\nfig.show()\n# The x-axis shows model and the y-axis shows CO2 emissions for the corresponding models. There is no direct correlation, but fuel type Z and X are most common with the higher emission rates.","output":{"0":{"data":{"iframe":"0e60c487f283c914dd5cbb089df64fbfc4f0c55b"},"exec_count":14,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"87cf60","input":"#joseph scatter plot\n\nnumerical_df = pd.DataFrame(df, columns=['Engine Size(L)', 'Cylinders', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)', 'Fuel Consumption Comb (mpg)', 'CO2 Emissions(g/km)'])\n\nplot = pd.plotting.scatter_matrix(numerical_df, alpha=0.2, figsize  = [20, 20])\n\nfor ax in plot.flatten():\n    ax.xaxis.label.set_rotation(90)\n    ax.yaxis.label.set_rotation(0)\n    ax.xaxis.label.set_fontsize(15)\n    ax.yaxis.label.set_fontsize(15)\n    ax.yaxis.label.set_ha('right')\n\nplt.gcf().subplots_adjust(wspace=0.05, hspace=0.05)\n\nplt.suptitle('Scatter Matrix')\nplt.show()\n#plot.write_html('scatter_matrix.html')","output":{"0":{"data":{"image/png":"46798321c506a4ab7d0ea5c59b45f11bf3ecb40f","text/plain":"<Figure size 1440x1440 with 49 Axes>"},"exec_count":14,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"927150","input":"#yukta\nfig = px.scatter(df, x=\"Cylinders\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", size= 'Engine Size(L)', title='Cylinders and CO2 Emission Relations')\nfig.show()\n# The x-axis shows cylinders and the y-axis shows CO2 emissions for the corresponding cylinders. The trends show that the greater the number of cylinders, the more the emissions. Cylinders are the parts in the car engine where fuel is combusted and energy is produced.","output":{"0":{"data":{"iframe":"d9ede5365ff634fb59d6e86c035abf58a86a5f5d"},"exec_count":15,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"131d09","input":"#Ashley\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LassoCV\n\n\ndfa = pd.read_csv('CO2 Emissions_Canada.csv')\ndfa.drop(['Make', 'Model', 'Vehicle Class', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)'], axis = 1, inplace = True)\ncol_category = ['Transmission', 'Fuel Type']\nfor col in col_category:\n    dfa = pd.concat([dfa.drop(col, axis=1), pd.get_dummies(dfa[col], prefix=col, prefix_sep='_')], axis=1)\n# define the input_columns and target variables","pos":84,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"2235f6","input":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"334a7f","input":"#Michael\n#X- Vehicle Class, Y- CO2 Emissions, Color- Type of Fuel\n#Trend: There isn't much of a trend between vehicle class and CO2 Emissions, emissions might be more dependent on the engine\narr = df['Vehicle Class'].to_numpy()\nyarr = df['CO2 Emissions(g/km)'].to_numpy()\nprint(arr)\nprint(yarr)\nnewyarr = np.array_split(yarr, 2)\nnewarr = np.array_split(arr, 2)\n\nfig = make_subplots(rows=2, cols=1)\ntrace0 = go.Box(\n    y=newyarr[0],\n    x=newarr[0],\n    name='1'\n)\n\ntrace1 = go.Box(\n    y=newyarr[1],\n    x=newarr[1],\n    name='2'\n)\n\n\nfig.append_trace(trace0, row = 1, col = 1)\nfig.append_trace(trace1, row = 2, col = 1)\n#fig = px.box(df, x= 'Vehicle Class', y= 'CO2 Emissions(g/km)', color='Fuel Type', title = 'CO2 Emissions by Vehicle class')\n\n#Changes the data's fuel label (X,Z,D...) to its actual fuel name\n#newnames = {'X': 'Regular gasoline', 'Z': 'Premium gasoline', 'D': 'Diesel', 'E': 'Ethanol (E85)', 'N': 'Natural gas'} #{'data's fuel name': 'Actual fuel name'}\n#fig.for_each_trace(lambda t: t.update(name = newnames[t.name], legendgroup = newnames[t.name], hovertemplate = t.hovertemplate.replace(t.name, newnames[t.name])))\n\nfig.show()","output":{"0":{"name":"stdout","output_type":"stream","text":"['COMPACT' 'COMPACT' 'COMPACT' ... 'SUV - SMALL' 'SUV - STANDARD'\n 'SUV - STANDARD']\n[196 221 136 ... 240 232 248]\n"},"1":{"data":{"iframe":"e990432a1572ab5c39d25d2fe2802baac091a457"},"exec_count":17,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"65a8f5","input":"#Michael\n#X- Engine Size, Y- CO2 Emissions, Color- Type of Fuel\n#Trend: as the size of the engine increases so does the CO2 emissions\n\nfig = px.scatter(df, x= 'Engine Size(L)', y= 'CO2 Emissions(g/km)', color='Fuel Type', title= 'CO2 Emissions by Engine Size')\n\n#Changes the data's fuel label (X,Z,D...) to its actual fuel name\n#newnames = {'X': 'Regular gasoline', 'Z': 'Premium gasoline', 'D': 'Diesel', 'E': 'Ethanol (E85)', 'N': 'Natural gas'} #{'data's fuel name': 'Actual fuel name'}\n#fig.for_each_trace(lambda t: t.update(name = newnames[t.name], legendgroup = newnames[t.name], hovertemplate = t.hovertemplate.replace(t.name, newnames[t.name])))\nfig.show()","output":{"0":{"data":{"iframe":"92ecd615465edcb9b7e8e6329fe142970ef02ce0"},"exec_count":18,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"8fef23","input":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"dd5a8f","input":"# Load dataset hint: pd.read_csv()","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"04df1b","input":"#Ameya \n\n\n#The graph shows how many carbon dioxide emissions are released by different vehicle types, wich fuel types were used, and the engine size used in the vehicle. Size of the engine are represented by the size of the dots.\n# Two seater cars with premium gasoline tend to produce the highest amounts of CO2 emissions\n# Diesel produces less carbon dioxide emissions than gasoline which is not what I expected\n\ndf.replace(to_replace= 'Z', value= 'Premium gasoline', inplace = True)\ndf.replace(to_replace= 'X', value= 'Gasoline' , inplace= True)\ndf.replace(to_replace= 'D', value= 'Diesel' , inplace= True)\ndf.replace(to_replace= 'E', value= 'Ethanol' , inplace= True)\ndf.replace(to_replace= 'N', value= 'Natural gas' , inplace= True)\n\nfig = px.box(df, x=\"Vehicle Class\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", title='CO2 Emissions by Vehicle')\nfig.show()","output":{"0":{"data":{"iframe":"4a671d053fb3a5aad89c54092d1d66b7e742a42d"},"exec_count":20,"output_type":"execute_result"}},"pos":29,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"7f8e37","input":"# looks good : )\n# oh... its reporting an error because we converted the columns into dummy variables. yeah but thats probably going to be a lot of work. i think we have 2000 columns after converting to dummy. We can drop the columns that we dont want first\n# you want \"Fuel Consumption Comb (mpg)\", \"Engine Size(L)\", \"Fuel Type\", \"Transmission\", \"Cylinders\" these right? okok\n#oh right.. should i replace it with the name of the dummy variables? ok yea\n\ninput_columns = dfa.loc[:, dfa.columns != \"CO2 Emissions(g/km)\"]\ntarget = dfa[\"CO2 Emissions(g/km)\"]\nx_traina, x_testa, y_traina, y_testa = train_test_split(input_columns, target, test_size=0.2)\n\nlassoa = LassoCV()\nlassoa.fit(x_traina, y_traina)\ny_hata = lassoa.predict(x_testa)","pos":86,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"86fa2d","input":"\n#Yukta's descriptions and graph\n\n# This box plot describes how the cylinders in vehicles and the carbon dioxide emission rates are related. The x-axis displays the number of cylinders that the particular vehicle has; cylinders are the areas in the vehicle where fuel is combusted and power is generated. The y-axis shows the corresponding carbon dioxide emissions based on the number of cylinders the vehicle has. The positive correlation between the x and y values shows that as the vehicle has more cylinders, the more carbon dioxide emissions are released by the car. This also works the other way around; if a vehicle has fewer cylinders, the vehicle will produce less carbon dioxide emissions.\n\n# Ridge regression is a machine learning model that estimates coefficients in scenarios where the data suffers multicollinearity; when data suffers multicollinearity, it means that the independent variables are highly correlated, and this is a necessary task since this data generally has predicted values far away from the actual values. Apart from using L2 regularization, a procedure that prevents excessive fluctuation of the coefficients, ridge regression also protects the model from overfitting: when the machine learning model tries to cover all, or more of, the data points present in the given dataset. The root mean square error was 7.660, and the normalized RMSE was 0.0179.\n\nfig = px.box(df, x=\"Cylinders\", y=\"CO2 Emissions(g/km)\", title='Cylinders and CO2 Emission Relations')\nfig.show()","output":{"0":{"data":{"iframe":"2d6b34b724e2eafabb019ee9099b8c39eefe402d"},"exec_count":23,"output_type":"execute_result"}},"pos":119,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"af3da1","input":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n#calculate MSE\ntotal_squared_error = (np.sum((y_testa - y_hata)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_testa) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n\n#calculate RMSE\nrmse = sqrt(mean_squared_error)\nprint(rmse)\n\n# normalize it\nnormrmse = rmse/(max(dfa['CO2 Emissions(g/km)'])-min(dfa['CO2 Emissions(g/km)']))\nprint(normrmse)","output":{"0":{"name":"stdout","output_type":"stream","text":"266.62106586048253\n16.328535325021733\n0.038329895129159\n"}},"pos":87,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"f07d5e","input":"dfa.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n      <th>Transmission_A10</th>\n      <th>Transmission_A4</th>\n      <th>Transmission_A5</th>\n      <th>Transmission_A6</th>\n      <th>Transmission_A7</th>\n      <th>Transmission_A8</th>\n      <th>...</th>\n      <th>Transmission_AV7</th>\n      <th>Transmission_AV8</th>\n      <th>Transmission_M5</th>\n      <th>Transmission_M6</th>\n      <th>Transmission_M7</th>\n      <th>Fuel Type_D</th>\n      <th>Fuel Type_E</th>\n      <th>Fuel Type_N</th>\n      <th>Fuel Type_X</th>\n      <th>Fuel Type_Z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2.0</td>\n      <td>4</td>\n      <td>33</td>\n      <td>196</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.4</td>\n      <td>4</td>\n      <td>29</td>\n      <td>221</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.5</td>\n      <td>4</td>\n      <td>48</td>\n      <td>136</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.5</td>\n      <td>6</td>\n      <td>25</td>\n      <td>255</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.5</td>\n      <td>6</td>\n      <td>27</td>\n      <td>244</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 36 columns</p>\n</div>","text/plain":"   Engine Size(L)  Cylinders  Fuel Consumption Comb (mpg)  \\\n0             2.0          4                           33   \n1             2.4          4                           29   \n2             1.5          4                           48   \n3             3.5          6                           25   \n4             3.5          6                           27   \n\n   CO2 Emissions(g/km)  Transmission_A10  Transmission_A4  Transmission_A5  \\\n0                  196                 0                0                0   \n1                  221                 0                0                0   \n2                  136                 0                0                0   \n3                  255                 0                0                0   \n4                  244                 0                0                0   \n\n   Transmission_A6  Transmission_A7  Transmission_A8  ...  Transmission_AV7  \\\n0                0                0                0  ...                 0   \n1                0                0                0  ...                 0   \n2                0                0                0  ...                 1   \n3                0                0                0  ...                 0   \n4                0                0                0  ...                 0   \n\n   Transmission_AV8  Transmission_M5  Transmission_M6  Transmission_M7  \\\n0                 0                0                0                0   \n1                 0                0                1                0   \n2                 0                0                0                0   \n3                 0                0                0                0   \n4                 0                0                0                0   \n\n   Fuel Type_D  Fuel Type_E  Fuel Type_N  Fuel Type_X  Fuel Type_Z  \n0            0            0            0            0            1  \n1            0            0            0            0            1  \n2            0            0            0            0            1  \n3            0            0            0            0            1  \n4            0            0            0            0            1  \n\n[5 rows x 36 columns]"},"exec_count":24,"output_type":"execute_result"}},"pos":85,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"47b2a9","input":"test = pd.read_csv('CO2 Emissions_Canada.csv')\ntest.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS5</td>\n      <td>Z</td>\n      <td>9.9</td>\n      <td>6.7</td>\n      <td>8.5</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>M6</td>\n      <td>Z</td>\n      <td>11.2</td>\n      <td>7.7</td>\n      <td>9.6</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>AV7</td>\n      <td>Z</td>\n      <td>6.0</td>\n      <td>5.8</td>\n      <td>5.9</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.7</td>\n      <td>9.1</td>\n      <td>11.1</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.1</td>\n      <td>8.7</td>\n      <td>10.6</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Vehicle Class  Engine Size(L)  Cylinders Transmission  \\\n0  ACURA         ILX       COMPACT             2.0          4          AS5   \n1  ACURA         ILX       COMPACT             2.4          4           M6   \n2  ACURA  ILX HYBRID       COMPACT             1.5          4          AV7   \n3  ACURA     MDX 4WD   SUV - SMALL             3.5          6          AS6   \n4  ACURA     RDX AWD   SUV - SMALL             3.5          6          AS6   \n\n  Fuel Type  Fuel Consumption City (L/100 km)  \\\n0         Z                               9.9   \n1         Z                              11.2   \n2         Z                               6.0   \n3         Z                              12.7   \n4         Z                              12.1   \n\n   Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n0                              6.7                               8.5   \n1                              7.7                               9.6   \n2                              5.8                               5.9   \n3                              9.1                              11.1   \n4                              8.7                              10.6   \n\n   Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           33                  196  \n1                           29                  221  \n2                           48                  136  \n3                           25                  255  \n4                           27                  244  "},"exec_count":36,"output_type":"execute_result"}},"pos":92,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"35ed20","input":"from sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LassoCV\nimport pickle\n\ndfam = pd.read_csv('CO2 Emissions_Canada.csv')\n\ndfam.replace(to_replace= 'Z', value= 'Premium gasoline', inplace = True)\ndfam.replace(to_replace= 'X', value= 'Gasoline' , inplace= True)\ndfam.replace(to_replace= 'D', value= 'Diesel' , inplace= True)\ndfam.replace(to_replace= 'E', value= 'Ethanol' , inplace= True)\ndfam.replace(to_replace= 'N', value= 'Natural gas' , inplace= True)\n\ndfam.drop(['Transmission', 'Engine Size(L)', 'Cylinders', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)'], axis = 1, inplace = True)\n# oh, forgot to update the df, yep\ndfam.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>Premium gasoline</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>Premium gasoline</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>Premium gasoline</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>Premium gasoline</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>Premium gasoline</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Vehicle Class         Fuel Type  \\\n0  ACURA         ILX       COMPACT  Premium gasoline   \n1  ACURA         ILX       COMPACT  Premium gasoline   \n2  ACURA  ILX HYBRID       COMPACT  Premium gasoline   \n3  ACURA     MDX 4WD   SUV - SMALL  Premium gasoline   \n4  ACURA     RDX AWD   SUV - SMALL  Premium gasoline   \n\n   Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           33                  196  \n1                           29                  221  \n2                           48                  136  \n3                           25                  255  \n4                           27                  244  "},"exec_count":4,"output_type":"execute_result"}},"pos":93,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"b6fefb","input":"# ashley 2\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LassoCV\n\n\ndfa2 = pd.read_csv('CO2 Emissions_Canada.csv')\ndfa2.drop(['Make', 'Model', 'Vehicle Class', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)', 'Transmission', 'Engine Size(L)', 'Cylinders'], axis = 1, inplace = True)\ncol_category = ['Fuel Type']\nfor col in col_category:\n    dfa2 = pd.concat([dfa2.drop(col, axis=1), pd.get_dummies(dfa2[col], prefix=col, prefix_sep='_')], axis=1)\n                    \n","pos":88,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"5c694a","input":"input_columns = dfa2.loc[:, dfa2.columns != \"CO2 Emissions(g/km)\"]\ntarget = dfa2[\"CO2 Emissions(g/km)\"]\nx_traina2, x_testa2, y_traina2, y_testa2 = train_test_split(input_columns, target, test_size=0.2)\n\nlassoa2 = LassoCV()\nlassoa2.fit(x_traina2, y_traina2)\ny_hata2 = lassoa2.predict(x_testa2)","pos":89,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"1925ee","input":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n#calculate MSE\ntotal_squared_error = (np.sum((y_testa2 - y_hata2)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_testa2) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n\n#calculate RMSE\nrmse = sqrt(mean_squared_error)\nprint(rmse)\n\n# normalize it\nnormrmse = rmse/(max(dfa2['CO2 Emissions(g/km)'])-min(dfa2['CO2 Emissions(g/km)']))\nprint(normrmse)","output":{"0":{"name":"stdout","output_type":"stream","text":"445.83499172997364\n21.11480503651345\n0.049565270038763966\n"}},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"398ea0","input":"test['Make'].unique()","output":{"0":{"data":{"text/plain":"array(['ACURA', 'ALFA ROMEO', 'ASTON MARTIN', 'AUDI', 'BENTLEY', 'BMW',\n       'BUICK', 'CADILLAC', 'CHEVROLET', 'CHRYSLER', 'DODGE', 'FIAT',\n       'FORD', 'GMC', 'HONDA', 'HYUNDAI', 'INFINITI', 'JAGUAR', 'JEEP',\n       'KIA', 'LAMBORGHINI', 'LAND ROVER', 'LEXUS', 'LINCOLN', 'MASERATI',\n       'MAZDA', 'MERCEDES-BENZ', 'MINI', 'MITSUBISHI', 'NISSAN',\n       'PORSCHE', 'RAM', 'ROLLS-ROYCE', 'SCION', 'SMART', 'SRT', 'SUBARU',\n       'TOYOTA', 'VOLKSWAGEN', 'VOLVO', 'GENESIS', 'BUGATTI'],\n      dtype=object)"},"exec_count":48,"output_type":"execute_result"}},"pos":83,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"0f186d","input":"#Ameya\n#Replaces X,Y,Z,D,N with Gasoline types\ndf.replace(to_replace= 'Z', value= 'Premium gasoline', inplace = True)\ndf.replace(to_replace= 'X', value= 'Gasoline' , inplace= True)\ndf.replace(to_replace= 'D', value= 'Diesel' , inplace= True)\ndf.replace(to_replace= 'E', value= 'Ethanol' , inplace= True)\ndf.replace(to_replace= 'N', value= 'Natural gas' , inplace= True)","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"3ebe36","input":"col_category_ameya = ['Make', 'Model', 'Vehicle Class' , 'Fuel Type']\nfor col in col_category_ameya:\n    dfam = pd.concat([dfam.drop(col, axis=1), pd.get_dummies(dfam[col], prefix=col, prefix_sep='_')], axis=1)\n\n#LOLLLLLLL we got an extra square bracket ok im glad that it works\n# yea :/\ninput_columns = dfam.loc[:, dfam.columns != 'CO2 Emissions(g/km)']\ntarget = dfam[\"CO2 Emissions(g/km)\"]\nx_trainam, x_testam, y_trainam, y_testam = train_test_split(input_columns, target, test_size=0.2)\n\n\nlassoam = LassoCV()\nlassoam.fit(x_trainam, y_trainam)\ny_hatam = lassoam.predict(x_testam)\n\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n#calculate MSE\ntotal_squared_error = (np.sum((y_testam - y_hatam)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_testam) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n\n#calculate RMSE\nrmse = sqrt(mean_squared_error)\nprint(rmse)\n\n# normalize it\nnormrmse = rmse/(max(dfam['CO2 Emissions(g/km)'])-min(dfam['CO2 Emissions(g/km)']))\nprint(normrmse)\n\n# save the model to disk\nfilename = 'finalized_model.sav'\npickle.dump(lassoam, open(filename, 'wb'))","output":{"0":{"name":"stdout","output_type":"stream","text":"374.2018629050104\n19.344297942934254\n0.04540915010078463\n"}},"pos":94,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"44f813","input":"# use .head() .info() and similar functions to get an overview of the data","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"47a7e1","input":"# Ashley\nfigES = px.scatter(df, x=\"Engine Size(L)\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", title=\"CO2 Emissions by Engine Size\")\nfigES.show()\n# shows the CO2 emissions based on the engine size. general trend towards the bigger the engine, the higher CO2 emissions\nfigES.write_html('EngineSize_Co2.html')","output":{"0":{"data":{"iframe":"703e644d75d152c86daf80f344e7f33532ef3c8e"},"exec_count":5,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"8f72a1","input":"import seaborn as sns\nsns.heatmap(df.corr())\n# correlation map which shows to which extent different variables are correlated\n# we can see that fuel consumption (mpg) has a heavy reverse correlatoin to CO2 emmisions, along with the other types of fuel consumption having pretty heavy correlatoin with CO2 emissions as well","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"72a0cfec035aabf4ce4e42f3618c34e47cf03f8c","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":6,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"03c3a6","input":"df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 7385 entries, 0 to 7384\nData columns (total 12 columns):\n #   Column                            Non-Null Count  Dtype  \n---  ------                            --------------  -----  \n 0   Make                              7385 non-null   object \n 1   Model                             7385 non-null   object \n 2   Vehicle Class                     7385 non-null   object \n 3   Engine Size(L)                    7385 non-null   float64\n 4   Cylinders                         7385 non-null   int64  \n 5   Transmission                      7385 non-null   object \n 6   Fuel Type                         7385 non-null   object \n 7   Fuel Consumption City (L/100 km)  7385 non-null   float64\n 8   Fuel Consumption Hwy (L/100 km)   7385 non-null   float64\n 9   Fuel Consumption Comb (L/100 km)  7385 non-null   float64\n 10  Fuel Consumption Comb (mpg)       7385 non-null   int64  \n 11  CO2 Emissions(g/km)               7385 non-null   int64  \ndtypes: float64(4), int64(3), object(5)\nmemory usage: 692.5+ KB\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"1d90de","input":"df.describe()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.160068</td>\n      <td>5.615030</td>\n      <td>12.556534</td>\n      <td>9.041706</td>\n      <td>10.975071</td>\n      <td>27.481652</td>\n      <td>250.584699</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.354170</td>\n      <td>1.828307</td>\n      <td>3.500274</td>\n      <td>2.224456</td>\n      <td>2.892506</td>\n      <td>7.231879</td>\n      <td>58.512679</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.900000</td>\n      <td>3.000000</td>\n      <td>4.200000</td>\n      <td>4.000000</td>\n      <td>4.100000</td>\n      <td>11.000000</td>\n      <td>96.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.000000</td>\n      <td>4.000000</td>\n      <td>10.100000</td>\n      <td>7.500000</td>\n      <td>8.900000</td>\n      <td>22.000000</td>\n      <td>208.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.000000</td>\n      <td>6.000000</td>\n      <td>12.100000</td>\n      <td>8.700000</td>\n      <td>10.600000</td>\n      <td>27.000000</td>\n      <td>246.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.700000</td>\n      <td>6.000000</td>\n      <td>14.600000</td>\n      <td>10.200000</td>\n      <td>12.600000</td>\n      <td>32.000000</td>\n      <td>288.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>8.400000</td>\n      <td>16.000000</td>\n      <td>30.600000</td>\n      <td>20.600000</td>\n      <td>26.100000</td>\n      <td>69.000000</td>\n      <td>522.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       Engine Size(L)    Cylinders  Fuel Consumption City (L/100 km)  \\\ncount     7385.000000  7385.000000                       7385.000000   \nmean         3.160068     5.615030                         12.556534   \nstd          1.354170     1.828307                          3.500274   \nmin          0.900000     3.000000                          4.200000   \n25%          2.000000     4.000000                         10.100000   \n50%          3.000000     6.000000                         12.100000   \n75%          3.700000     6.000000                         14.600000   \nmax          8.400000    16.000000                         30.600000   \n\n       Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\ncount                      7385.000000                       7385.000000   \nmean                          9.041706                         10.975071   \nstd                           2.224456                          2.892506   \nmin                           4.000000                          4.100000   \n25%                           7.500000                          8.900000   \n50%                           8.700000                         10.600000   \n75%                          10.200000                         12.600000   \nmax                          20.600000                         26.100000   \n\n       Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \ncount                  7385.000000          7385.000000  \nmean                     27.481652           250.584699  \nstd                       7.231879            58.512679  \nmin                      11.000000            96.000000  \n25%                      22.000000           208.000000  \n50%                      27.000000           246.000000  \n75%                      32.000000           288.000000  \nmax                      69.000000           522.000000  "},"exec_count":8,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"c44b8f","input":"df[['Make', 'Model']]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7380</th>\n      <td>VOLVO</td>\n      <td>XC40 T5 AWD</td>\n    </tr>\n    <tr>\n      <th>7381</th>\n      <td>VOLVO</td>\n      <td>XC60 T5 AWD</td>\n    </tr>\n    <tr>\n      <th>7382</th>\n      <td>VOLVO</td>\n      <td>XC60 T6 AWD</td>\n    </tr>\n    <tr>\n      <th>7383</th>\n      <td>VOLVO</td>\n      <td>XC90 T5 AWD</td>\n    </tr>\n    <tr>\n      <th>7384</th>\n      <td>VOLVO</td>\n      <td>XC90 T6 AWD</td>\n    </tr>\n  </tbody>\n</table>\n<p>7385 rows Ã— 2 columns</p>\n</div>","text/plain":"       Make        Model\n0     ACURA          ILX\n1     ACURA          ILX\n2     ACURA   ILX HYBRID\n3     ACURA      MDX 4WD\n4     ACURA      RDX AWD\n...     ...          ...\n7380  VOLVO  XC40 T5 AWD\n7381  VOLVO  XC60 T5 AWD\n7382  VOLVO  XC60 T6 AWD\n7383  VOLVO  XC90 T5 AWD\n7384  VOLVO  XC90 T6 AWD\n\n[7385 rows x 2 columns]"},"exec_count":8,"output_type":"execute_result"}},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"987db1","input":"# Check null values","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"03c5d9","input":"#### Support Vector Regression\n\n","pos":97,"type":"cell"}
{"cell_type":"markdown","id":"0421f3","input":"#### MLP Regressor\n\n","pos":115,"type":"cell"}
{"cell_type":"markdown","id":"14a3f2","input":"### Data Cleaning\n\n","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"1662b3","input":"Data source: [https://www.kaggle.com/datasets/debajyotipodder/co2\\-emission\\-by\\-vehicles](https://www.kaggle.com/datasets/debajyotipodder/co2-emission-by-vehicles)\n\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"184986","input":"### Model Fitting\n\n","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"18ee10","input":"#### Random Forest","pos":64,"type":"cell"}
{"cell_type":"markdown","id":"1c2114","input":"### Import Packages\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"1d714d","input":"- Lasso Linear Regression\n- Random Forest\n- Support Vector Regression\n- XGboost\n- Ridge Regression\n\n","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"27e5ab","input":"#### Hyperparameter tuning - Grid Search\n\n[https://scikit\\-learn.org/stable/modules/generated/sklearn.model\\_selection.GridSearchCV.html](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html)\n\n","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"5813cf","input":"#### Ridge Regression\n\n","pos":110,"type":"cell"}
{"cell_type":"markdown","id":"95930d","input":"#### Lasso Linear Regression","pos":76,"type":"cell"}
{"cell_type":"markdown","id":"ba27d2","input":"### Exploratory Data Analysis\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"c61173","input":"### Data Overview\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"c61969","input":"### Splitting Data\n\nfor this section, use the train\\_test\\_split function : \\)\n\nrefer to the cancer\\-detection notebook or [https://scikit\\-learn.org/stable/modules/generated/sklearn.model\\_selection.train\\_test\\_split.html](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) on how to use train\\_test\\_split\n\n","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"dd7839","input":"#### XGBoost\n\n","pos":54,"type":"cell"}
{"id":0,"time":1659708884901,"type":"user"}
{"last_load":1659707820403,"type":"file"}