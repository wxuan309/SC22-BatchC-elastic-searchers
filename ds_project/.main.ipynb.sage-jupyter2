{"backend_state":"init","connection_file":"/projects/7c08c135-501d-4a5d-8ef1-fb9399dd6cfe/.local/share/jupyter/runtime/kernel-7b3b9c03-f051-41d5-824e-f074feca112c.json","kernel":"elastic-searchers","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0f186d","input":"#Ameya\n#Replaces X,Y,Z,D,N with Gasoline types\ndf.replace(to_replace= 'Z', value= 'Premium gasoline', inplace = True)\ndf.replace(to_replace= 'X', value= 'Gasoline' , inplace= True)\ndf.replace(to_replace= 'D', value= 'Diesel' , inplace= True)\ndf.replace(to_replace= 'E', value= 'Ethanol' , inplace= True)\ndf.replace(to_replace= 'N', value= 'Natural gas' , inplace= True)","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"135cd3","input":"","pos":53,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2235f6","input":"","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2bcda1","input":"from sklearn.model_selection import train_test_split\n# define the input_columns and target variables\ninput_columns = \ntarget = \nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"689df6","input":"","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"83b4a8","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8879d7","input":"#Michael GXBoost\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\n# define the input_columns and target variables\ninput_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\ntarget = target = df[\"CO2 Emissions(g/km)\"]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)\n# here you have x_train, make sure that you have consistent variables\n# ah, we also need to convert categorical variables into dummy variables\n# or you can train the numeric columns first\n# remember previously that we converted column diagnosis in the cancer-detection notebook, it is also the same concept\n# the model cant understand string characters, so we need to have it in numeric value --> which is dummy variables\n\n# here is a skeleton code of converting categorical variables into dummy variables\n# add the column names that you want to convert in col_category\ncol_category = ['Make', 'Model', 'Vehicle Class', 'Transmission', 'Fuel Type']\nfor col in col_category:\n    df = pd.concat([df.drop(col, axis=1), pd.get_dummies(df[col], prefix=col, prefix_sep='_')], axis=1)\n\n# i copied pasted the ml code in another cell to prevent the converting process from running repeatedly\n# it might take a while for the mdoel to run","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8f72a1","input":"","pos":50,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9eb2e5","input":"","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ac8906","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ae0d7e","input":"# handle missing data or convert categorical data into dummy variables","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cd070c","input":"","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cf92d8","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cfe3a1","input":"","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e15610","input":"#Ameya Randomn Forest\n# keep in mind that we are doing the regression problem, so make sure that you import the correspond model\nfrom sklearn.ensemble import RandomForestClassifier\n","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e8fba2","input":"","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e9c8ab","input":"","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ece7cf","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fb2e59","input":"","pos":51,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"dd5a8f","input":"# Load dataset hint: pd.read_csv()","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"44f813","input":"# use .head() .info() and similar functions to get an overview of the data","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"987db1","input":"# Check null values","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"9f75cd","input":"# create plots for your data to understand the trend of data :D","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"cab5c0","input":"#Ashley lasso linear regression\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\ninput_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\ntarget = df[[\"CO2 Emissions(g/km)\"]]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)\n\nlinear_model.Lasso.fit(x_train, y_train)","output":{"0":{"ename":"TypeError","evalue":"fit() missing 1 required positional argument: 'y'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [19]\u001b[0m, in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m target \u001b[38;5;241m=\u001b[39m df[[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCO2 Emissions(g/km)\u001b[39m\u001b[38;5;124m\"\u001b[39m]]\n\u001b[1;32m      6\u001b[0m x_train, x_test, y_train, y_test \u001b[38;5;241m=\u001b[39m train_test_split(input_columns, target, test_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.2\u001b[39m)\n\u001b[0;32m----> 8\u001b[0m \u001b[43mlinear_model\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mLasso\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mTypeError\u001b[0m: fit() missing 1 required positional argument: 'y'"]}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"0081c8","input":"df = pd.read_csv('CO2 Emissions_Canada.csv')","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"bd130c","input":"df.isna().sum()","output":{"0":{"data":{"text/plain":"Make                                0\nModel                               0\nVehicle Class                       0\nEngine Size(L)                      0\nCylinders                           0\nTransmission                        0\nFuel Type                           0\nFuel Consumption City (L/100 km)    0\nFuel Consumption Hwy (L/100 km)     0\nFuel Consumption Comb (L/100 km)    0\nFuel Consumption Comb (mpg)         0\nCO2 Emissions(g/km)                 0\ndtype: int64"},"exec_count":20,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"930182","input":"my_model = XGBRegressor()\nmy_model.fit(x_train, y_train, verbose=False)\ny_hat = my_model.predict(x_test)\n\nMAE = np.mean(abs(y_test - y_hat))\nprint(MAE)\nmy_model.score(x_train, y_train)","output":{"0":{"ename":"ValueError","evalue":"Unable to coerce to Series, length must be 1: given 1477","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [21]\u001b[0m, in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m my_model\u001b[38;5;241m.\u001b[39mfit(x_train, y_train, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m      3\u001b[0m y_hat \u001b[38;5;241m=\u001b[39m my_model\u001b[38;5;241m.\u001b[39mpredict(x_test)\n\u001b[0;32m----> 5\u001b[0m MAE \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mmean(\u001b[38;5;28mabs\u001b[39m(\u001b[43my_test\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[43m \u001b[49m\u001b[43my_hat\u001b[49m))\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28mprint\u001b[39m(MAE)\n\u001b[1;32m      7\u001b[0m my_model\u001b[38;5;241m.\u001b[39mscore(x_train, y_train)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/ops/common.py:70\u001b[0m, in \u001b[0;36m_unpack_zerodim_and_defer.<locals>.new_method\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     66\u001b[0m             \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mNotImplemented\u001b[39m\n\u001b[1;32m     68\u001b[0m other \u001b[38;5;241m=\u001b[39m item_from_zerodim(other)\n\u001b[0;32m---> 70\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mmethod\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mother\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/arraylike.py:108\u001b[0m, in \u001b[0;36mOpsMixin.__sub__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    106\u001b[0m \u001b[38;5;129m@unpack_zerodim_and_defer\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__sub__\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    107\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__sub__\u001b[39m(\u001b[38;5;28mself\u001b[39m, other):\n\u001b[0;32m--> 108\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_arith_method\u001b[49m\u001b[43m(\u001b[49m\u001b[43mother\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moperator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msub\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/frame.py:6950\u001b[0m, in \u001b[0;36mDataFrame._arith_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   6947\u001b[0m axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m  \u001b[38;5;66;03m# only relevant for Series other case\u001b[39;00m\n\u001b[1;32m   6948\u001b[0m other \u001b[38;5;241m=\u001b[39m ops\u001b[38;5;241m.\u001b[39mmaybe_prepare_scalar_for_op(other, (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mshape[axis],))\n\u001b[0;32m-> 6950\u001b[0m \u001b[38;5;28mself\u001b[39m, other \u001b[38;5;241m=\u001b[39m \u001b[43mops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43malign_method_FRAME\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mother\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m   6952\u001b[0m new_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_dispatch_frame_op(other, op, axis\u001b[38;5;241m=\u001b[39maxis)\n\u001b[1;32m   6953\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_construct_result(new_data)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/ops/__init__.py:248\u001b[0m, in \u001b[0;36malign_method_FRAME\u001b[0;34m(left, right, axis, flex, level)\u001b[0m\n\u001b[1;32m    245\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(right, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[1;32m    247\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m right\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m--> 248\u001b[0m         right \u001b[38;5;241m=\u001b[39m \u001b[43mto_series\u001b[49m\u001b[43m(\u001b[49m\u001b[43mright\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    250\u001b[0m     \u001b[38;5;28;01melif\u001b[39;00m right\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m:\n\u001b[1;32m    251\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m right\u001b[38;5;241m.\u001b[39mshape \u001b[38;5;241m==\u001b[39m left\u001b[38;5;241m.\u001b[39mshape:\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/pandas/core/ops/__init__.py:239\u001b[0m, in \u001b[0;36malign_method_FRAME.<locals>.to_series\u001b[0;34m(right)\u001b[0m\n\u001b[1;32m    237\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    238\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcolumns) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(right):\n\u001b[0;32m--> 239\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    240\u001b[0m             msg\u001b[38;5;241m.\u001b[39mformat(req_len\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcolumns), given_len\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlen\u001b[39m(right))\n\u001b[1;32m    241\u001b[0m         )\n\u001b[1;32m    242\u001b[0m     right \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39m_constructor_sliced(right, index\u001b[38;5;241m=\u001b[39mleft\u001b[38;5;241m.\u001b[39mcolumns)\n\u001b[1;32m    243\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m right\n","\u001b[0;31mValueError\u001b[0m: Unable to coerce to Series, length must be 1: given 1477"]}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"d01cc4","input":"df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS5</td>\n      <td>Z</td>\n      <td>9.9</td>\n      <td>6.7</td>\n      <td>8.5</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>M6</td>\n      <td>Z</td>\n      <td>11.2</td>\n      <td>7.7</td>\n      <td>9.6</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>AV7</td>\n      <td>Z</td>\n      <td>6.0</td>\n      <td>5.8</td>\n      <td>5.9</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.7</td>\n      <td>9.1</td>\n      <td>11.1</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.1</td>\n      <td>8.7</td>\n      <td>10.6</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Vehicle Class  Engine Size(L)  Cylinders Transmission  \\\n0  ACURA         ILX       COMPACT             2.0          4          AS5   \n1  ACURA         ILX       COMPACT             2.4          4           M6   \n2  ACURA  ILX HYBRID       COMPACT             1.5          4          AV7   \n3  ACURA     MDX 4WD   SUV - SMALL             3.5          6          AS6   \n4  ACURA     RDX AWD   SUV - SMALL             3.5          6          AS6   \n\n  Fuel Type  Fuel Consumption City (L/100 km)  \\\n0         Z                               9.9   \n1         Z                              11.2   \n2         Z                               6.0   \n3         Z                              12.7   \n4         Z                              12.1   \n\n   Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n0                              6.7                               8.5   \n1                              7.7                               9.6   \n2                              5.8                               5.9   \n3                              9.1                              11.1   \n4                              8.7                              10.6   \n\n   Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           33                  196  \n1                           29                  221  \n2                           48                  136  \n3                           25                  255  \n4                           27                  244  "},"exec_count":21,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"03c3a6","input":"df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 7385 entries, 0 to 7384\nData columns (total 12 columns):\n #   Column                            Non-Null Count  Dtype  \n---  ------                            --------------  -----  \n 0   Make                              7385 non-null   object \n 1   Model                             7385 non-null   object \n 2   Vehicle Class                     7385 non-null   object \n 3   Engine Size(L)                    7385 non-null   float64\n 4   Cylinders                         7385 non-null   int64  \n 5   Transmission                      7385 non-null   object \n 6   Fuel Type                         7385 non-null   object \n 7   Fuel Consumption City (L/100 km)  7385 non-null   float64\n 8   Fuel Consumption Hwy (L/100 km)   7385 non-null   float64\n 9   Fuel Consumption Comb (L/100 km)  7385 non-null   float64\n 10  Fuel Consumption Comb (mpg)       7385 non-null   int64  \n 11  CO2 Emissions(g/km)               7385 non-null   int64  \ndtypes: float64(4), int64(3), object(5)\nmemory usage: 692.5+ KB\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"2420ac","input":"y_hat","output":{"0":{"data":{"text/plain":"array([245.38124, 277.9996 , 104.87968, ..., 293.34888, 202.40215,\n       265.1338 ], dtype=float32)"},"exec_count":22,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"1d90de","input":"df.describe()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.160068</td>\n      <td>5.615030</td>\n      <td>12.556534</td>\n      <td>9.041706</td>\n      <td>10.975071</td>\n      <td>27.481652</td>\n      <td>250.584699</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.354170</td>\n      <td>1.828307</td>\n      <td>3.500274</td>\n      <td>2.224456</td>\n      <td>2.892506</td>\n      <td>7.231879</td>\n      <td>58.512679</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.900000</td>\n      <td>3.000000</td>\n      <td>4.200000</td>\n      <td>4.000000</td>\n      <td>4.100000</td>\n      <td>11.000000</td>\n      <td>96.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.000000</td>\n      <td>4.000000</td>\n      <td>10.100000</td>\n      <td>7.500000</td>\n      <td>8.900000</td>\n      <td>22.000000</td>\n      <td>208.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.000000</td>\n      <td>6.000000</td>\n      <td>12.100000</td>\n      <td>8.700000</td>\n      <td>10.600000</td>\n      <td>27.000000</td>\n      <td>246.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.700000</td>\n      <td>6.000000</td>\n      <td>14.600000</td>\n      <td>10.200000</td>\n      <td>12.600000</td>\n      <td>32.000000</td>\n      <td>288.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>8.400000</td>\n      <td>16.000000</td>\n      <td>30.600000</td>\n      <td>20.600000</td>\n      <td>26.100000</td>\n      <td>69.000000</td>\n      <td>522.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       Engine Size(L)    Cylinders  Fuel Consumption City (L/100 km)  \\\ncount     7385.000000  7385.000000                       7385.000000   \nmean         3.160068     5.615030                         12.556534   \nstd          1.354170     1.828307                          3.500274   \nmin          0.900000     3.000000                          4.200000   \n25%          2.000000     4.000000                         10.100000   \n50%          3.000000     6.000000                         12.100000   \n75%          3.700000     6.000000                         14.600000   \nmax          8.400000    16.000000                         30.600000   \n\n       Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\ncount                      7385.000000                       7385.000000   \nmean                          9.041706                         10.975071   \nstd                           2.224456                          2.892506   \nmin                           4.000000                          4.100000   \n25%                           7.500000                          8.900000   \n50%                           8.700000                         10.600000   \n75%                          10.200000                         12.600000   \nmax                          20.600000                         26.100000   \n\n       Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \ncount                  7385.000000          7385.000000  \nmean                     27.481652           250.584699  \nstd                       7.231879            58.512679  \nmin                      11.000000            96.000000  \n25%                      22.000000           208.000000  \n50%                      27.000000           246.000000  \n75%                      32.000000           288.000000  \nmax                      69.000000           522.000000  "},"exec_count":23,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"05589f","input":"#yukta\nfig = px.scatter(df, x=\"Model\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", size= 'Engine Size(L)', title='CO2 Emissions by Model')\nfig.show()\n# The x-axis shows model and the y-axis shows CO2 emissions for the corresponding models. There is no direct correlation, but fuel type Z and X are most common with the higher emission rates.","output":{"0":{"data":{"iframe":"b7a8c60c33ba285e566b12056349432a45e88592"},"exec_count":24,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"927150","input":"#yukta\nfig = px.scatter(df, x=\"Cylinders\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", size= 'Engine Size(L)', title='Cylinders and CO2 Emission Relations')\nfig.show()\n# The x-axis shows cylinders and the y-axis shows CO2 emissions for the corresponding cylinders. The trends show that the greater the number of cylinders, the more the emissions. Cylinders are the parts in the car engine where fuel is combusted and energy is produced.","output":{"0":{"data":{"iframe":"44e8ee06c9e2c8c1640d219175d137d11644b040"},"exec_count":25,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"e5485a","input":"# Ashley - only shows vehicles using premium gasoline\ndfz = df[df[\"Fuel Type\"] == \"Z\"]","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"334a7f","input":"#Michael\n#X- Vehicle Class, Y- CO2 Emissions, Color- Type of Fuel\n#Trend: There isn't much of a trend between vehicle class and CO2 Emissions, emissions might be more dependent on the engine\n\nfig = px.scatter(df, x= 'Vehicle Class', y= 'CO2 Emissions(g/km)', color='Fuel Type', title = 'CO2 Emissions by Vehicle class')\n\n#Changes the data's fuel label (X,Z,D...) to its actual fuel name\nnewnames = {'X': 'Regular gasoline', 'Z': 'Premium gasoline', 'D': 'Diesel', 'E': 'Ethanol (E85)', 'N': 'Natural gas'} #{'data's fuel name': 'Actual fuel name'}\nfig.for_each_trace(lambda t: t.update(name = newnames[t.name], legendgroup = newnames[t.name], hovertemplate = t.hovertemplate.replace(t.name, newnames[t.name])))\n\nfig.show()","output":{"0":{"data":{"iframe":"781597537f711e902df64458bfe8d4272302791d"},"exec_count":30,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"04df1b","input":"#Ameya \n#The graph shows how many carbon dioxide emissions are released by different vehicle types, wich fuel types were used, and the engine size used in the vehicle. Size of the engine are represented by the size of the dots.\n# Two seater cars with premium gasoline tend to produce the highest amounts of CO2 emissions\n# Diesel produces less carbon dioxide emissions than gasoline which is not what I expected\n\ndf.replace(to_replace= 'Z', value= 'Premium gasoline', inplace = True)\ndf.replace(to_replace= 'X', value= 'Gasoline' , inplace= True)\ndf.replace(to_replace= 'D', value= 'Diesel' , inplace= True)\ndf.replace(to_replace= 'E', value= 'Ethanol' , inplace= True)\ndf.replace(to_replace= 'N', value= 'Natural gas' , inplace= True)\n\nfig = px.scatter(df, x=\"Vehicle Class\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", size=  'Engine Size(L)', title='CO2 Emissions by Vehicle')\nfig.show()","output":{"0":{"data":{"iframe":"a5535987e5dc6dda5b7e4ca8fee336f7fbcdac01"},"exec_count":33,"output_type":"execute_result"}},"pos":26,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"47a7e1","input":"# Ashley\nfigES = px.scatter(df, x=\"Engine Size(L)\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", title=\"CO2 Emissions by Engine Size\")\nfigES.show()\n# shows the CO2 emissions based on the engine size. general trend towards the bigger the engine, the higher CO2 emissions","output":{"0":{"data":{"iframe":"01554ac0c2d661b3c819549ee47b435f6b1bc8fd"},"exec_count":34,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"fe7c19","input":"# Ashley - only shows vehicles using regular gasoline\ndfx = df[df[\"Fuel Type\"] == \"X\"]","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"288d91","input":"#Ameya\n#Shows all the cars that emmit more than 500g/km if CO2\ndf[df [\"CO2 Emissions(g/km)\"] >=500]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4509</th>\n      <td>BUGATTI</td>\n      <td>CHIRON</td>\n      <td>TWO-SEATER</td>\n      <td>8.0</td>\n      <td>16</td>\n      <td>AM7</td>\n      <td>Premium gasoline</td>\n      <td>26.8</td>\n      <td>16.6</td>\n      <td>22.2</td>\n      <td>13</td>\n      <td>522</td>\n    </tr>\n    <tr>\n      <th>5575</th>\n      <td>BUGATTI</td>\n      <td>Chiron</td>\n      <td>TWO-SEATER</td>\n      <td>8.0</td>\n      <td>16</td>\n      <td>AM7</td>\n      <td>Premium gasoline</td>\n      <td>26.8</td>\n      <td>16.6</td>\n      <td>22.2</td>\n      <td>13</td>\n      <td>522</td>\n    </tr>\n    <tr>\n      <th>6640</th>\n      <td>BUGATTI</td>\n      <td>Chiron</td>\n      <td>TWO-SEATER</td>\n      <td>8.0</td>\n      <td>16</td>\n      <td>AM7</td>\n      <td>Premium gasoline</td>\n      <td>26.8</td>\n      <td>16.6</td>\n      <td>22.2</td>\n      <td>13</td>\n      <td>522</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         Make   Model Vehicle Class  Engine Size(L)  Cylinders Transmission  \\\n4509  BUGATTI  CHIRON    TWO-SEATER             8.0         16          AM7   \n5575  BUGATTI  Chiron    TWO-SEATER             8.0         16          AM7   \n6640  BUGATTI  Chiron    TWO-SEATER             8.0         16          AM7   \n\n             Fuel Type  Fuel Consumption City (L/100 km)  \\\n4509  Premium gasoline                              26.8   \n5575  Premium gasoline                              26.8   \n6640  Premium gasoline                              26.8   \n\n      Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n4509                             16.6                              22.2   \n5575                             16.6                              22.2   \n6640                             16.6                              22.2   \n\n      Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n4509                           13                  522  \n5575                           13                  522  \n6640                           13                  522  "},"exec_count":41,"output_type":"execute_result"}},"pos":35,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"a18181","input":"#Ameya\ndf[df [\"CO2 Emissions(g/km)\"] <=100]\n#Shows all cars that emmit less than 100g/km of CO2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3824</th>\n      <td>HYUNDAI</td>\n      <td>IONIQ BLUE</td>\n      <td>FULL-SIZE</td>\n      <td>1.6</td>\n      <td>4</td>\n      <td>AM6</td>\n      <td>Gasoline</td>\n      <td>4.2</td>\n      <td>4.0</td>\n      <td>4.1</td>\n      <td>69</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>4900</th>\n      <td>HYUNDAI</td>\n      <td>IONIQ BLUE</td>\n      <td>FULL-SIZE</td>\n      <td>1.6</td>\n      <td>4</td>\n      <td>AM6</td>\n      <td>Gasoline</td>\n      <td>4.2</td>\n      <td>4.0</td>\n      <td>4.1</td>\n      <td>69</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>5931</th>\n      <td>HYUNDAI</td>\n      <td>IONIQ Blue</td>\n      <td>FULL-SIZE</td>\n      <td>1.6</td>\n      <td>4</td>\n      <td>AM6</td>\n      <td>Gasoline</td>\n      <td>4.2</td>\n      <td>4.0</td>\n      <td>4.1</td>\n      <td>69</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>6949</th>\n      <td>HYUNDAI</td>\n      <td>IONIQ</td>\n      <td>FULL-SIZE</td>\n      <td>1.6</td>\n      <td>4</td>\n      <td>AM6</td>\n      <td>Gasoline</td>\n      <td>4.2</td>\n      <td>4.2</td>\n      <td>4.2</td>\n      <td>67</td>\n      <td>99</td>\n    </tr>\n    <tr>\n      <th>6950</th>\n      <td>HYUNDAI</td>\n      <td>IONIQ Blue</td>\n      <td>FULL-SIZE</td>\n      <td>1.6</td>\n      <td>4</td>\n      <td>AM6</td>\n      <td>Gasoline</td>\n      <td>4.2</td>\n      <td>4.0</td>\n      <td>4.1</td>\n      <td>69</td>\n      <td>96</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         Make       Model Vehicle Class  Engine Size(L)  Cylinders  \\\n3824  HYUNDAI  IONIQ BLUE     FULL-SIZE             1.6          4   \n4900  HYUNDAI  IONIQ BLUE     FULL-SIZE             1.6          4   \n5931  HYUNDAI  IONIQ Blue     FULL-SIZE             1.6          4   \n6949  HYUNDAI       IONIQ     FULL-SIZE             1.6          4   \n6950  HYUNDAI  IONIQ Blue     FULL-SIZE             1.6          4   \n\n     Transmission Fuel Type  Fuel Consumption City (L/100 km)  \\\n3824          AM6  Gasoline                               4.2   \n4900          AM6  Gasoline                               4.2   \n5931          AM6  Gasoline                               4.2   \n6949          AM6  Gasoline                               4.2   \n6950          AM6  Gasoline                               4.2   \n\n      Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n3824                              4.0                               4.1   \n4900                              4.0                               4.1   \n5931                              4.0                               4.1   \n6949                              4.2                               4.2   \n6950                              4.0                               4.1   \n\n      Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n3824                           69                   96  \n4900                           69                   96  \n5931                           69                   96  \n6949                           67                   99  \n6950                           69                   96  "},"exec_count":45,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"448fca","input":"# Yukta\n# Shows vehicles using diesel (D on graph)\ndfd = df[df[\"Fuel Type\"] == \"D\"]\ndfd","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>","text/plain":"Empty DataFrame\nColumns: [Make, Model, Vehicle Class, Engine Size(L), Cylinders, Transmission, Fuel Type, Fuel Consumption City (L/100 km), Fuel Consumption Hwy (L/100 km), Fuel Consumption Comb (L/100 km), Fuel Consumption Comb (mpg), CO2 Emissions(g/km)]\nIndex: []"},"exec_count":46,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"058f73","input":"df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS5</td>\n      <td>Premium gasoline</td>\n      <td>9.9</td>\n      <td>6.7</td>\n      <td>8.5</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>M6</td>\n      <td>Premium gasoline</td>\n      <td>11.2</td>\n      <td>7.7</td>\n      <td>9.6</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>AV7</td>\n      <td>Premium gasoline</td>\n      <td>6.0</td>\n      <td>5.8</td>\n      <td>5.9</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Premium gasoline</td>\n      <td>12.7</td>\n      <td>9.1</td>\n      <td>11.1</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Premium gasoline</td>\n      <td>12.1</td>\n      <td>8.7</td>\n      <td>10.6</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Vehicle Class  Engine Size(L)  Cylinders Transmission  \\\n0  ACURA         ILX       COMPACT             2.0          4          AS5   \n1  ACURA         ILX       COMPACT             2.4          4           M6   \n2  ACURA  ILX HYBRID       COMPACT             1.5          4          AV7   \n3  ACURA     MDX 4WD   SUV - SMALL             3.5          6          AS6   \n4  ACURA     RDX AWD   SUV - SMALL             3.5          6          AS6   \n\n          Fuel Type  Fuel Consumption City (L/100 km)  \\\n0  Premium gasoline                               9.9   \n1  Premium gasoline                              11.2   \n2  Premium gasoline                               6.0   \n3  Premium gasoline                              12.7   \n4  Premium gasoline                              12.1   \n\n   Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n0                              6.7                               8.5   \n1                              7.7                               9.6   \n2                              5.8                               5.9   \n3                              9.1                              11.1   \n4                              8.7                              10.6   \n\n   Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           33                  196  \n1                           29                  221  \n2                           48                  136  \n3                           25                  255  \n4                           27                  244  "},"exec_count":50,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"65a8f5","input":"#Michael\n#X- Engine Size, Y- CO2 Emissions, Color- Type of Fuel\n#Trend: as the size of the engine increases so does the CO2 emissions\n\nfig = px.scatter(df, x= 'Engine Size(L)', y= 'CO2 Emissions(g/km)', color='Fuel Type', title= 'CO2 Emissions by Engine Size')\n\n#Changes the data's fuel label (X,Z,D...) to its actual fuel name\n#newnames = {'X': 'Regular gasoline', 'Z': 'Premium gasoline', 'D': 'Diesel', 'E': 'Ethanol (E85)', 'N': 'Natural gas'} #{'data's fuel name': 'Actual fuel name'}\n#fig.for_each_trace(lambda t: t.update(name = newnames[t.name], legendgroup = newnames[t.name], hovertemplate = t.hovertemplate.replace(t.name, newnames[t.name])))\nfig.show()","output":{"0":{"data":{"iframe":"c6c85a5d68fc1622a45e44f8fdaf05210944559f"},"exec_count":52,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"87cf60","input":"#joseph scatter plot\n\nfinal_df = pd.DataFrame(df, columns=['Engine Size(L)', 'Cylinders', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)', 'Fuel Consumption Comb (mpg)', 'CO2 Emissions(g/km)'])\naxes = pd.plotting.scatter_matrix(final_df, alpha=0.2)\nfor ax in axes.flatten():\n    ax.xaxis.label.set_rotation(90)\n    ax.yaxis.label.set_rotation(0)\n    ax.yaxis.label.set_ha('right')\n\nplt.gcf().subplots_adjust(wspace=0, hspace=0)\nplt.show()","output":{"0":{"data":{"image/png":"ea6c98595230f21f7fc88600b4f7a4ef8ef63b94","text/plain":"<Figure size 432x288 with 49 Axes>"},"exec_count":56,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c13883","input":"import pandas as pd\nimport plotly.express as px\nimport numpy as np\nfrom matplotlib import pyplot as plt\n","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"2c89db","input":"","output":{"0":{"ename":"NameError","evalue":"name 'x' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [8]\u001b[0m, in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m val_idx \u001b[38;5;241m=\u001b[39m idx[\u001b[38;5;241m80\u001b[39m:]\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# Generates train and validation sets\u001b[39;00m\n\u001b[0;32m---> 12\u001b[0m x_train, y_train \u001b[38;5;241m=\u001b[39m \u001b[43mx\u001b[49m[train_idx], y[train_idx]\n\u001b[1;32m     13\u001b[0m x_val, y_val \u001b[38;5;241m=\u001b[39m x[val_idx], y[val_idx]\n","\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"]}},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"14a3f2","input":"### Data Cleaning\n\n","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"1662b3","input":"Data source: [https://www.kaggle.com/datasets/debajyotipodder/co2\\-emission\\-by\\-vehicles](https://www.kaggle.com/datasets/debajyotipodder/co2-emission-by-vehicles)\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"184986","input":"### Model Fitting","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"1c2114","input":"### Import Packages\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"1d714d","input":"- Lasso Linear Regression\n- Random Forest\n- Support Vector Regressor\n- XGboost\n- Neural Network\n\n","pos":44,"type":"cell"}
{"cell_type":"markdown","id":"ba27d2","input":"### Exploratory Data Analysis","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"c61173","input":"### Data Overview\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"c61969","input":"### Splitting Data\n\nfor this section, refer to the train\\_test\\_split function : \\)\n\nrefer to the cancer\\-detection notebook or [https://scikit\\-learn.org/stable/modules/generated/sklearn.model\\_selection.train\\_test\\_split.html](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) on how to use train\\_test\\_split\n","pos":37,"type":"cell"}
{"id":0,"time":1658773481851,"type":"user"}
{"last_load":1658780875563,"type":"file"}