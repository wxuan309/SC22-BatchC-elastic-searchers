{"backend_state":"init","connection_file":"/projects/7c08c135-501d-4a5d-8ef1-fb9399dd6cfe/.local/share/jupyter/runtime/kernel-2c25a49d-8dce-4d9a-b687-8b705d096a3d.json","kernel":"elastic-searchers","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"d81d9e","input":"","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fcd488","input":"","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"b4045c","input":"pd.read_csv('./archive/CO2 Emissions_Canada.csv').isnull()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7380</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>7381</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>7382</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>7383</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>7384</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>7385 rows Ã— 12 columns</p>\n</div>","text/plain":"       Make  Model  Vehicle Class  Engine Size(L)  Cylinders  Transmission  \\\n0     False  False          False           False      False         False   \n1     False  False          False           False      False         False   \n2     False  False          False           False      False         False   \n3     False  False          False           False      False         False   \n4     False  False          False           False      False         False   \n...     ...    ...            ...             ...        ...           ...   \n7380  False  False          False           False      False         False   \n7381  False  False          False           False      False         False   \n7382  False  False          False           False      False         False   \n7383  False  False          False           False      False         False   \n7384  False  False          False           False      False         False   \n\n      Fuel Type  Fuel Consumption City (L/100 km)  \\\n0         False                             False   \n1         False                             False   \n2         False                             False   \n3         False                             False   \n4         False                             False   \n...         ...                               ...   \n7380      False                             False   \n7381      False                             False   \n7382      False                             False   \n7383      False                             False   \n7384      False                             False   \n\n      Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n0                               False                             False   \n1                               False                             False   \n2                               False                             False   \n3                               False                             False   \n4                               False                             False   \n...                               ...                               ...   \n7380                            False                             False   \n7381                            False                             False   \n7382                            False                             False   \n7383                            False                             False   \n7384                            False                             False   \n\n      Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           False                False  \n1                           False                False  \n2                           False                False  \n3                           False                False  \n4                           False                False  \n...                           ...                  ...  \n7380                        False                False  \n7381                        False                False  \n7382                        False                False  \n7383                        False                False  \n7384                        False                False  \n\n[7385 rows x 12 columns]"},"exec_count":10,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"7566b3","input":"drop_columns = ['Transmission', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)']\ndf.drop(drop_columns, axis=1, inplace=True)\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>Z</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>Z</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Vehicle Class  Engine Size(L)  Cylinders Fuel Type  \\\n0  ACURA         ILX       COMPACT             2.0          4         Z   \n1  ACURA         ILX       COMPACT             2.4          4         Z   \n2  ACURA  ILX HYBRID       COMPACT             1.5          4         Z   \n3  ACURA     MDX 4WD   SUV - SMALL             3.5          6         Z   \n4  ACURA     RDX AWD   SUV - SMALL             3.5          6         Z   \n\n   Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           33                  196  \n1                           29                  221  \n2                           48                  136  \n3                           25                  255  \n4                           27                  244  "},"exec_count":11,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"47aca0","input":"df.isna().sum()","output":{"0":{"data":{"text/plain":"Make                           0\nModel                          0\nVehicle Class                  0\nEngine Size(L)                 0\nCylinders                      0\nFuel Type                      0\nFuel Consumption Comb (mpg)    0\nCO2 Emissions(g/km)            0\ndtype: int64"},"exec_count":12,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"9a90fb","input":"# create plots for your data to understand the trend of data :D","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"17c7f4","input":"fig = px.scatter(df, x=\"Vehicle Class\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", size= 'Engine Size(L)', title='CO2 Emissions by Vehicle')\nfig.show()\n# The x-axis shows vehicle class and the y-axis shows CO2 emissions for the corresponding classes. There is no direct correlation between the values, but two-seater cars tend to have higher than average emission rates.","output":{"0":{"data":{"iframe":"62f8b6518dd6417a9a0f2ed9cf9615491e4e3553"},"exec_count":14,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"3c81c7","input":"fig = px.scatter(df, x=\"Model\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", size= 'Engine Size(L)', title='CO2 Emissions by Model')\nfig.show()\n# The x-axis shows model and the y-axis shows CO2 emissions for the corresponding models. There is no direct correlation, but fuel type Z and X are most common with the higher emission rates.","output":{"0":{"data":{"iframe":"acf31ccd2fadc0bbd40753bf80b8031358a82327"},"exec_count":15,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"663b68","input":"fig = px.box(df, x=\"Vehicle Class\", y=\"Cylinders\", title='Vehicle Class and Cylinders')\nfig.show()\n# The x-axis shows vehicle class and the y-axis shows cylinders for the corresponding classes. There is no direct correlation between the values, since it is a box plot. Two-seaters tend to have the most cylinders - the area where fuel is combusted and energy is made.","output":{"0":{"data":{"iframe":"277c6ea8e31faa7d98491cc2aeab2aa2d062dbae"},"exec_count":16,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"78b01d","input":"fig = px.scatter(df, x=\"Fuel Consumption Comb (mpg)\", y=\"CO2 Emissions(g/km)\", color=\"Fuel Type\", size= 'Engine Size(L)', title='Fuel Consumption Combined and CO2 Emission Correlation')\nfig.show()\n# The x-axis shows fuel consumption and the y-axis shows CO2 emissions for the corresponding fuel consumption rates. There is a negative correlation between the axes which suggests that overall more fuel consumption leads to less emissions.","output":{"0":{"data":{"iframe":"44382451cbedaa05fd2540928f21e81e66173af1"},"exec_count":17,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"ac7aec","input":"# handle missing data or convert categorical data into dummy variables","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"5a31a8","input":"import pandas as pd\nimport plotly.express as px","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"d535d5","input":"# Only shows vehicles using regular gasoline (D on graph)\ndfd = df[df[\"Fuel Type\"] == \"D\"]\ndfd","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>28</th>\n      <td>AUDI</td>\n      <td>A6 QUATTRO TDI (modified)</td>\n      <td>MID-SIZE</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>35</td>\n      <td>217</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>AUDI</td>\n      <td>A7 QUATTRO TDI (modified)</td>\n      <td>MID-SIZE</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>35</td>\n      <td>217</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>AUDI</td>\n      <td>A8 TDI (modified)</td>\n      <td>MID-SIZE</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>34</td>\n      <td>224</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>AUDI</td>\n      <td>A8L TDI (modified)</td>\n      <td>FULL-SIZE</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>34</td>\n      <td>224</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>AUDI</td>\n      <td>Q5 TDI (modified)</td>\n      <td>SUV - SMALL</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>31</td>\n      <td>244</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7066</th>\n      <td>LAND ROVER</td>\n      <td>Discovery TD6 Diesel</td>\n      <td>SUV - STANDARD</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>27</td>\n      <td>279</td>\n    </tr>\n    <tr>\n      <th>7070</th>\n      <td>LAND ROVER</td>\n      <td>Range Rover TD6 Diesel</td>\n      <td>SUV - STANDARD</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>29</td>\n      <td>256</td>\n    </tr>\n    <tr>\n      <th>7076</th>\n      <td>LAND ROVER</td>\n      <td>Range Rover Sport TD6 Diesel</td>\n      <td>SUV - STANDARD</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>29</td>\n      <td>256</td>\n    </tr>\n    <tr>\n      <th>7271</th>\n      <td>RAM</td>\n      <td>1500 EcoDiesel</td>\n      <td>PICKUP TRUCK - STANDARD</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>31</td>\n      <td>243</td>\n    </tr>\n    <tr>\n      <th>7276</th>\n      <td>RAM</td>\n      <td>1500 4X4 EcoDiesel</td>\n      <td>PICKUP TRUCK - STANDARD</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>D</td>\n      <td>29</td>\n      <td>260</td>\n    </tr>\n  </tbody>\n</table>\n<p>175 rows Ã— 8 columns</p>\n</div>","text/plain":"            Make                         Model            Vehicle Class  \\\n28          AUDI     A6 QUATTRO TDI (modified)                 MID-SIZE   \n30          AUDI     A7 QUATTRO TDI (modified)                 MID-SIZE   \n33          AUDI             A8 TDI (modified)                 MID-SIZE   \n37          AUDI            A8L TDI (modified)                FULL-SIZE   \n41          AUDI             Q5 TDI (modified)              SUV - SMALL   \n...          ...                           ...                      ...   \n7066  LAND ROVER          Discovery TD6 Diesel           SUV - STANDARD   \n7070  LAND ROVER        Range Rover TD6 Diesel           SUV - STANDARD   \n7076  LAND ROVER  Range Rover Sport TD6 Diesel           SUV - STANDARD   \n7271         RAM                1500 EcoDiesel  PICKUP TRUCK - STANDARD   \n7276         RAM            1500 4X4 EcoDiesel  PICKUP TRUCK - STANDARD   \n\n      Engine Size(L)  Cylinders Fuel Type  Fuel Consumption Comb (mpg)  \\\n28               3.0          6         D                           35   \n30               3.0          6         D                           35   \n33               3.0          6         D                           34   \n37               3.0          6         D                           34   \n41               3.0          6         D                           31   \n...              ...        ...       ...                          ...   \n7066             3.0          6         D                           27   \n7070             3.0          6         D                           29   \n7076             3.0          6         D                           29   \n7271             3.0          6         D                           31   \n7276             3.0          6         D                           29   \n\n      CO2 Emissions(g/km)  \n28                    217  \n30                    217  \n33                    224  \n37                    224  \n41                    244  \n...                   ...  \n7066                  279  \n7070                  256  \n7076                  256  \n7271                  243  \n7276                  260  \n\n[175 rows x 8 columns]"},"exec_count":20,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"d9912b","input":"# Only shows vehicles using premium gasoline (Z on graph)\ndfz = df[df[\"Fuel Type\"] == \"Z\"]\ndfz","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>Z</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>Z</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7380</th>\n      <td>VOLVO</td>\n      <td>XC40 T5 AWD</td>\n      <td>SUV - SMALL</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>30</td>\n      <td>219</td>\n    </tr>\n    <tr>\n      <th>7381</th>\n      <td>VOLVO</td>\n      <td>XC60 T5 AWD</td>\n      <td>SUV - SMALL</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>29</td>\n      <td>232</td>\n    </tr>\n    <tr>\n      <th>7382</th>\n      <td>VOLVO</td>\n      <td>XC60 T6 AWD</td>\n      <td>SUV - SMALL</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>27</td>\n      <td>240</td>\n    </tr>\n    <tr>\n      <th>7383</th>\n      <td>VOLVO</td>\n      <td>XC90 T5 AWD</td>\n      <td>SUV - STANDARD</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>29</td>\n      <td>232</td>\n    </tr>\n    <tr>\n      <th>7384</th>\n      <td>VOLVO</td>\n      <td>XC90 T6 AWD</td>\n      <td>SUV - STANDARD</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>Z</td>\n      <td>26</td>\n      <td>248</td>\n    </tr>\n  </tbody>\n</table>\n<p>3202 rows Ã— 8 columns</p>\n</div>","text/plain":"       Make        Model   Vehicle Class  Engine Size(L)  Cylinders Fuel Type  \\\n0     ACURA          ILX         COMPACT             2.0          4         Z   \n1     ACURA          ILX         COMPACT             2.4          4         Z   \n2     ACURA   ILX HYBRID         COMPACT             1.5          4         Z   \n3     ACURA      MDX 4WD     SUV - SMALL             3.5          6         Z   \n4     ACURA      RDX AWD     SUV - SMALL             3.5          6         Z   \n...     ...          ...             ...             ...        ...       ...   \n7380  VOLVO  XC40 T5 AWD     SUV - SMALL             2.0          4         Z   \n7381  VOLVO  XC60 T5 AWD     SUV - SMALL             2.0          4         Z   \n7382  VOLVO  XC60 T6 AWD     SUV - SMALL             2.0          4         Z   \n7383  VOLVO  XC90 T5 AWD  SUV - STANDARD             2.0          4         Z   \n7384  VOLVO  XC90 T6 AWD  SUV - STANDARD             2.0          4         Z   \n\n      Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                              33                  196  \n1                              29                  221  \n2                              48                  136  \n3                              25                  255  \n4                              27                  244  \n...                           ...                  ...  \n7380                           30                  219  \n7381                           29                  232  \n7382                           27                  240  \n7383                           29                  232  \n7384                           26                  248  \n\n[3202 rows x 8 columns]"},"exec_count":21,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"4476ad","input":"import pandas as pd\nimport plotly.express as px\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import GridSearchCV","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"064cc6","input":"from sklearn.model_selection import train_test_split\ncol_category = ['Make', 'Model', 'Vehicle Class', 'Fuel Type']\nfor col in col_category:\n    df = pd.concat([df.drop(col, axis=1), pd.get_dummies(df[col], prefix=col, prefix_sep='_')], axis=1)\n# define the input_columns and target variables\ninput_columns = df.loc[:, df.columns != \"CO2 Emissions(g/km)\"]\ntarget = target = df[\"CO2 Emissions(g/km)\"]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"9c5600","input":"df.columns","output":{"0":{"data":{"text/plain":"Index(['Engine Size(L)', 'Cylinders', 'Fuel Consumption Comb (mpg)',\n       'CO2 Emissions(g/km)', 'Make_ACURA', 'Make_ALFA ROMEO',\n       'Make_ASTON MARTIN', 'Make_AUDI', 'Make_BENTLEY', 'Make_BMW',\n       ...\n       'Vehicle Class_SUV - SMALL', 'Vehicle Class_SUV - STANDARD',\n       'Vehicle Class_TWO-SEATER', 'Vehicle Class_VAN - CARGO',\n       'Vehicle Class_VAN - PASSENGER', 'Fuel Type_D', 'Fuel Type_E',\n       'Fuel Type_N', 'Fuel Type_X', 'Fuel Type_Z'],\n      dtype='object', length=2120)"},"exec_count":24,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"296993","input":"#yukta\nimport pandas as pd\nfrom numpy import arange\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import RepeatedKFold\n\n\n# i think we need to enter values greater than 0.0 for the alpha\n# https://www.statology.org/ridge-regression-in-python/ \n\n\n#data = pd.read_csv(\"CO2 Emissions_Canada.csv\")\n#X=data[\"Make\",\"Model\",\"Vehicle Class\",\"Engine Size(L)\",\"Cylinders,Transmission\",\"Fuel Type\",\"Fuel Consumption City (L/100 km)\",\"Fuel Consumption Hwy (L/100 km)\",\"Fuel #Consumption Comb (L/100 km)\",\"Fuel Consumption Comb (mpg)\"]\n#Y=data[\"CO2 Emissions(g/km)\"]\n\n\n#x_train, x_test, y_train, y_test\n# cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\nridge = RidgeCV(alphas=arange(0.00001, 1, 0.01))\nridge.fit(x_train, y_train)\nprint(ridge.alpha_)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.22001\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"575fcd","input":"y_hat = ridge.predict(x_test)","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"4c1096","input":"ridge.score(x_test, y_test)\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n#normalized root mean squared error: https://www.statology.org/what-is-a-good-rmse/\n","output":{"0":{"name":"stdout","output_type":"stream","text":"65.49301771406877\n"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"586031","input":"from sklearn.metrics import mean_squared_error\n\nrmse=mean_squared_error(y_test, y_hat, squared=False)\nprint(rmse)\nnorm=rmse/(max(df['CO2 Emissions(g/km)'])-min(df['CO2 Emissions(g/km)']))\nprint(norm)","output":{"0":{"name":"stdout","output_type":"stream","text":"8.092775649557373\n0.018997125937928107\n"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"b29ecf","input":"# https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html\ngrid_params_ridge = { 'alpha' : [2,5],\n                    'fit_intercept' : [True, False],\n                    'normalize' : [True, False]}\ngs_ridge = GridSearchCV(RidgeCV(), grid_params_ridge)\ngs_ridge_res = gs_ridge.fit(x_train, y_train)\nprint(gs_ridge_res.best_params_)","output":{"0":{"ename":"ValueError","evalue":"Invalid parameter 'alpha' for estimator RidgeCV(). Valid parameters are: ['alpha_per_target', 'alphas', 'cv', 'fit_intercept', 'gcv_mode', 'normalize', 'scoring', 'store_cv_values'].","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [29]\u001b[0m, in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m grid_params_ridge \u001b[38;5;241m=\u001b[39m { \u001b[38;5;124m'\u001b[39m\u001b[38;5;124malpha\u001b[39m\u001b[38;5;124m'\u001b[39m : [\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m5\u001b[39m],\n\u001b[1;32m      3\u001b[0m                     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfit_intercept\u001b[39m\u001b[38;5;124m'\u001b[39m : [\u001b[38;5;28;01mTrue\u001b[39;00m, \u001b[38;5;28;01mFalse\u001b[39;00m],\n\u001b[1;32m      4\u001b[0m                     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnormalize\u001b[39m\u001b[38;5;124m'\u001b[39m : [\u001b[38;5;28;01mTrue\u001b[39;00m, \u001b[38;5;28;01mFalse\u001b[39;00m]}\n\u001b[1;32m      5\u001b[0m gs_ridge \u001b[38;5;241m=\u001b[39m GridSearchCV(RidgeCV(), grid_params_ridge)\n\u001b[0;32m----> 6\u001b[0m gs_ridge_res \u001b[38;5;241m=\u001b[39m \u001b[43mgs_ridge\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28mprint\u001b[39m(gs_ridge_res\u001b[38;5;241m.\u001b[39mbest_params_)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:875\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    869\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    870\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    871\u001b[0m     )\n\u001b[1;32m    873\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 875\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    878\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    879\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:1375\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1373\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1374\u001b[0m     \u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1375\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:822\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    814\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    815\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\n\u001b[1;32m    816\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitting \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m folds for each of \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m candidates,\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    817\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m totalling \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    818\u001b[0m             n_splits, n_candidates, n_candidates \u001b[38;5;241m*\u001b[39m n_splits\n\u001b[1;32m    819\u001b[0m         )\n\u001b[1;32m    820\u001b[0m     )\n\u001b[0;32m--> 822\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mparallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    823\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_fit_and_score\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    824\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbase_estimator\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    825\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    826\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    827\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    828\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtest\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtest\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    829\u001b[0m \u001b[43m        \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    830\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_splits\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    831\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcandidate_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_candidates\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    832\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_and_score_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    833\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    834\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparameters\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mproduct\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    835\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcandidate_params\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msplit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    836\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    837\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    839\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    840\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    841\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo fits were performed. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    842\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWas the CV iterator empty? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    843\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWere there no candidates?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    844\u001b[0m     )\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:1043\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1034\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1035\u001b[0m     \u001b[38;5;66;03m# Only set self._iterating to True if at least a batch\u001b[39;00m\n\u001b[1;32m   1036\u001b[0m     \u001b[38;5;66;03m# was dispatched. In particular this covers the edge\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1040\u001b[0m     \u001b[38;5;66;03m# was very quick and its callback already dispatched all the\u001b[39;00m\n\u001b[1;32m   1041\u001b[0m     \u001b[38;5;66;03m# remaining jobs.\u001b[39;00m\n\u001b[1;32m   1042\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_iterating \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m-> 1043\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdispatch_one_batch\u001b[49m\u001b[43m(\u001b[49m\u001b[43miterator\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m   1044\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_iterating \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_original_iterator \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1046\u001b[0m     \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdispatch_one_batch(iterator):\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:861\u001b[0m, in \u001b[0;36mParallel.dispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    859\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m    860\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 861\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dispatch\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtasks\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    862\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:779\u001b[0m, in \u001b[0;36mParallel._dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    777\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m    778\u001b[0m     job_idx \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs)\n\u001b[0;32m--> 779\u001b[0m     job \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_backend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_async\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbatch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcallback\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcb\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    780\u001b[0m     \u001b[38;5;66;03m# A job can complete so quickly than its callback is\u001b[39;00m\n\u001b[1;32m    781\u001b[0m     \u001b[38;5;66;03m# called before we get here, causing self._jobs to\u001b[39;00m\n\u001b[1;32m    782\u001b[0m     \u001b[38;5;66;03m# grow. To ensure correct results ordering, .insert is\u001b[39;00m\n\u001b[1;32m    783\u001b[0m     \u001b[38;5;66;03m# used (rather than .append) in the following line\u001b[39;00m\n\u001b[1;32m    784\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs\u001b[38;5;241m.\u001b[39minsert(job_idx, job)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/_parallel_backends.py:208\u001b[0m, in \u001b[0;36mSequentialBackend.apply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_async\u001b[39m(\u001b[38;5;28mself\u001b[39m, func, callback\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    207\u001b[0m     \u001b[38;5;124;03m\"\"\"Schedule a func to be run\"\"\"\u001b[39;00m\n\u001b[0;32m--> 208\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[43mImmediateResult\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    209\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m callback:\n\u001b[1;32m    210\u001b[0m         callback(result)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/_parallel_backends.py:572\u001b[0m, in \u001b[0;36mImmediateResult.__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    569\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, batch):\n\u001b[1;32m    570\u001b[0m     \u001b[38;5;66;03m# Don't delay the application, to avoid keeping the input\u001b[39;00m\n\u001b[1;32m    571\u001b[0m     \u001b[38;5;66;03m# arguments in memory\u001b[39;00m\n\u001b[0;32m--> 572\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mresults \u001b[38;5;241m=\u001b[39m \u001b[43mbatch\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:262\u001b[0m, in \u001b[0;36mBatchedCalls.__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    258\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    259\u001b[0m     \u001b[38;5;66;03m# Set the default nested backend to self._backend but do not set the\u001b[39;00m\n\u001b[1;32m    260\u001b[0m     \u001b[38;5;66;03m# change the default number of processes to -1\u001b[39;00m\n\u001b[1;32m    261\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m parallel_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_n_jobs):\n\u001b[0;32m--> 262\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m [func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    263\u001b[0m                 \u001b[38;5;28;01mfor\u001b[39;00m func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems]\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/joblib/parallel.py:262\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    258\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    259\u001b[0m     \u001b[38;5;66;03m# Set the default nested backend to self._backend but do not set the\u001b[39;00m\n\u001b[1;32m    260\u001b[0m     \u001b[38;5;66;03m# change the default number of processes to -1\u001b[39;00m\n\u001b[1;32m    261\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m parallel_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_n_jobs):\n\u001b[0;32m--> 262\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m [\u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    263\u001b[0m                 \u001b[38;5;28;01mfor\u001b[39;00m func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems]\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/utils/fixes.py:117\u001b[0m, in \u001b[0;36m_FuncWrapper.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    116\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig):\n\u001b[0;32m--> 117\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:674\u001b[0m, in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    671\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m parameters\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m    672\u001b[0m         cloned_parameters[k] \u001b[38;5;241m=\u001b[39m clone(v, safe\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[0;32m--> 674\u001b[0m     estimator \u001b[38;5;241m=\u001b[39m \u001b[43mestimator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mset_params\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcloned_parameters\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    676\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime()\n\u001b[1;32m    678\u001b[0m X_train, y_train \u001b[38;5;241m=\u001b[39m _safe_split(estimator, X, y, train)\n","File \u001b[0;32m~/miniconda3/lib/python3.9/site-packages/sklearn/base.py:246\u001b[0m, in \u001b[0;36mBaseEstimator.set_params\u001b[0;34m(self, **params)\u001b[0m\n\u001b[1;32m    244\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m key \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m valid_params:\n\u001b[1;32m    245\u001b[0m     local_valid_params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_param_names()\n\u001b[0;32m--> 246\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    247\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid parameter \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m!r}\u001b[39;00m\u001b[38;5;124m for estimator \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    248\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mValid parameters are: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlocal_valid_params\u001b[38;5;132;01m!r}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    249\u001b[0m     )\n\u001b[1;32m    251\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m delim:\n\u001b[1;32m    252\u001b[0m     nested_params[key][sub_key] \u001b[38;5;241m=\u001b[39m value\n","\u001b[0;31mValueError\u001b[0m: Invalid parameter 'alpha' for estimator RidgeCV(). Valid parameters are: ['alpha_per_target', 'alphas', 'cv', 'fit_intercept', 'gcv_mode', 'normalize', 'scoring', 'store_cv_values']."]}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"704a50","input":"# Load dataset hint: pd.read_csv()\n#the file? oh your code!\ndf = pd.read_csv('./archive/CO2 Emissions_Canada.csv')","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"4bf138","input":"fig = px.box(df, x=\"Cylinders\", y=\"CO2 Emissions(g/km)\", title='Cylinders and CO2 Emission Relations')\nfig.show()\n# This box plot describes how the cylinders in vehicles and the carbon dioxide emission rates are related. The x-axis displays the number of cylinders that the particular vehicle has; cylinders are the areas in the vehicle where fuel is combusted and power is generated. The y-axis shows the corresponding carbon dioxide emissions based on the number of cylinders the vehicle has. The positive correlation between the x and y values shows that as the vehicle has more cylinders, the more carbon dioxide emissions are released by the car. This also works the other way around; if a vehicle has fewer cylinders, the vehicle will produce less carbon dioxide emissions.","output":{"0":{"data":{"iframe":"aff01b2faa8e516beacc02e9e0be2e471a3d6f92"},"exec_count":30,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"20b260","input":"# use .head() .info() and similar functions to get an overview of the data","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"9784c9","input":"pd.read_csv('./archive/CO2 Emissions_Canada.csv').head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS5</td>\n      <td>Z</td>\n      <td>9.9</td>\n      <td>6.7</td>\n      <td>8.5</td>\n      <td>33</td>\n      <td>196</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ACURA</td>\n      <td>ILX</td>\n      <td>COMPACT</td>\n      <td>2.4</td>\n      <td>4</td>\n      <td>M6</td>\n      <td>Z</td>\n      <td>11.2</td>\n      <td>7.7</td>\n      <td>9.6</td>\n      <td>29</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ACURA</td>\n      <td>ILX HYBRID</td>\n      <td>COMPACT</td>\n      <td>1.5</td>\n      <td>4</td>\n      <td>AV7</td>\n      <td>Z</td>\n      <td>6.0</td>\n      <td>5.8</td>\n      <td>5.9</td>\n      <td>48</td>\n      <td>136</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ACURA</td>\n      <td>MDX 4WD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.7</td>\n      <td>9.1</td>\n      <td>11.1</td>\n      <td>25</td>\n      <td>255</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACURA</td>\n      <td>RDX AWD</td>\n      <td>SUV - SMALL</td>\n      <td>3.5</td>\n      <td>6</td>\n      <td>AS6</td>\n      <td>Z</td>\n      <td>12.1</td>\n      <td>8.7</td>\n      <td>10.6</td>\n      <td>27</td>\n      <td>244</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Make       Model Vehicle Class  Engine Size(L)  Cylinders Transmission  \\\n0  ACURA         ILX       COMPACT             2.0          4          AS5   \n1  ACURA         ILX       COMPACT             2.4          4           M6   \n2  ACURA  ILX HYBRID       COMPACT             1.5          4          AV7   \n3  ACURA     MDX 4WD   SUV - SMALL             3.5          6          AS6   \n4  ACURA     RDX AWD   SUV - SMALL             3.5          6          AS6   \n\n  Fuel Type  Fuel Consumption City (L/100 km)  \\\n0         Z                               9.9   \n1         Z                              11.2   \n2         Z                               6.0   \n3         Z                              12.7   \n4         Z                              12.1   \n\n   Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n0                              6.7                               8.5   \n1                              7.7                               9.6   \n2                              5.8                               5.9   \n3                              9.1                              11.1   \n4                              8.7                              10.6   \n\n   Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n0                           33                  196  \n1                           29                  221  \n2                           48                  136  \n3                           25                  255  \n4                           27                  244  "},"exec_count":5,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"64b671","input":"pd.read_csv('./archive/CO2 Emissions_Canada.csv').describe()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n      <td>7385.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.160068</td>\n      <td>5.615030</td>\n      <td>12.556534</td>\n      <td>9.041706</td>\n      <td>10.975071</td>\n      <td>27.481652</td>\n      <td>250.584699</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.354170</td>\n      <td>1.828307</td>\n      <td>3.500274</td>\n      <td>2.224456</td>\n      <td>2.892506</td>\n      <td>7.231879</td>\n      <td>58.512679</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.900000</td>\n      <td>3.000000</td>\n      <td>4.200000</td>\n      <td>4.000000</td>\n      <td>4.100000</td>\n      <td>11.000000</td>\n      <td>96.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.000000</td>\n      <td>4.000000</td>\n      <td>10.100000</td>\n      <td>7.500000</td>\n      <td>8.900000</td>\n      <td>22.000000</td>\n      <td>208.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.000000</td>\n      <td>6.000000</td>\n      <td>12.100000</td>\n      <td>8.700000</td>\n      <td>10.600000</td>\n      <td>27.000000</td>\n      <td>246.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.700000</td>\n      <td>6.000000</td>\n      <td>14.600000</td>\n      <td>10.200000</td>\n      <td>12.600000</td>\n      <td>32.000000</td>\n      <td>288.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>8.400000</td>\n      <td>16.000000</td>\n      <td>30.600000</td>\n      <td>20.600000</td>\n      <td>26.100000</td>\n      <td>69.000000</td>\n      <td>522.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       Engine Size(L)    Cylinders  Fuel Consumption City (L/100 km)  \\\ncount     7385.000000  7385.000000                       7385.000000   \nmean         3.160068     5.615030                         12.556534   \nstd          1.354170     1.828307                          3.500274   \nmin          0.900000     3.000000                          4.200000   \n25%          2.000000     4.000000                         10.100000   \n50%          3.000000     6.000000                         12.100000   \n75%          3.700000     6.000000                         14.600000   \nmax          8.400000    16.000000                         30.600000   \n\n       Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\ncount                      7385.000000                       7385.000000   \nmean                          9.041706                         10.975071   \nstd                           2.224456                          2.892506   \nmin                           4.000000                          4.100000   \n25%                           7.500000                          8.900000   \n50%                           8.700000                         10.600000   \n75%                          10.200000                         12.600000   \nmax                          20.600000                         26.100000   \n\n       Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \ncount                  7385.000000          7385.000000  \nmean                     27.481652           250.584699  \nstd                       7.231879            58.512679  \nmin                      11.000000            96.000000  \n25%                      22.000000           208.000000  \n50%                      27.000000           246.000000  \n75%                      32.000000           288.000000  \nmax                      69.000000           522.000000  "},"exec_count":6,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"e54fc3","input":"pd.read_csv('./archive/CO2 Emissions_Canada.csv').tail()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Model</th>\n      <th>Vehicle Class</th>\n      <th>Engine Size(L)</th>\n      <th>Cylinders</th>\n      <th>Transmission</th>\n      <th>Fuel Type</th>\n      <th>Fuel Consumption City (L/100 km)</th>\n      <th>Fuel Consumption Hwy (L/100 km)</th>\n      <th>Fuel Consumption Comb (L/100 km)</th>\n      <th>Fuel Consumption Comb (mpg)</th>\n      <th>CO2 Emissions(g/km)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7380</th>\n      <td>VOLVO</td>\n      <td>XC40 T5 AWD</td>\n      <td>SUV - SMALL</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS8</td>\n      <td>Z</td>\n      <td>10.7</td>\n      <td>7.7</td>\n      <td>9.4</td>\n      <td>30</td>\n      <td>219</td>\n    </tr>\n    <tr>\n      <th>7381</th>\n      <td>VOLVO</td>\n      <td>XC60 T5 AWD</td>\n      <td>SUV - SMALL</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS8</td>\n      <td>Z</td>\n      <td>11.2</td>\n      <td>8.3</td>\n      <td>9.9</td>\n      <td>29</td>\n      <td>232</td>\n    </tr>\n    <tr>\n      <th>7382</th>\n      <td>VOLVO</td>\n      <td>XC60 T6 AWD</td>\n      <td>SUV - SMALL</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS8</td>\n      <td>Z</td>\n      <td>11.7</td>\n      <td>8.6</td>\n      <td>10.3</td>\n      <td>27</td>\n      <td>240</td>\n    </tr>\n    <tr>\n      <th>7383</th>\n      <td>VOLVO</td>\n      <td>XC90 T5 AWD</td>\n      <td>SUV - STANDARD</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS8</td>\n      <td>Z</td>\n      <td>11.2</td>\n      <td>8.3</td>\n      <td>9.9</td>\n      <td>29</td>\n      <td>232</td>\n    </tr>\n    <tr>\n      <th>7384</th>\n      <td>VOLVO</td>\n      <td>XC90 T6 AWD</td>\n      <td>SUV - STANDARD</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>AS8</td>\n      <td>Z</td>\n      <td>12.2</td>\n      <td>8.7</td>\n      <td>10.7</td>\n      <td>26</td>\n      <td>248</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       Make        Model   Vehicle Class  Engine Size(L)  Cylinders  \\\n7380  VOLVO  XC40 T5 AWD     SUV - SMALL             2.0          4   \n7381  VOLVO  XC60 T5 AWD     SUV - SMALL             2.0          4   \n7382  VOLVO  XC60 T6 AWD     SUV - SMALL             2.0          4   \n7383  VOLVO  XC90 T5 AWD  SUV - STANDARD             2.0          4   \n7384  VOLVO  XC90 T6 AWD  SUV - STANDARD             2.0          4   \n\n     Transmission Fuel Type  Fuel Consumption City (L/100 km)  \\\n7380          AS8         Z                              10.7   \n7381          AS8         Z                              11.2   \n7382          AS8         Z                              11.7   \n7383          AS8         Z                              11.2   \n7384          AS8         Z                              12.2   \n\n      Fuel Consumption Hwy (L/100 km)  Fuel Consumption Comb (L/100 km)  \\\n7380                              7.7                               9.4   \n7381                              8.3                               9.9   \n7382                              8.6                              10.3   \n7383                              8.3                               9.9   \n7384                              8.7                              10.7   \n\n      Fuel Consumption Comb (mpg)  CO2 Emissions(g/km)  \n7380                           30                  219  \n7381                           29                  232  \n7382                           27                  240  \n7383                           29                  232  \n7384                           26                  248  "},"exec_count":7,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"3f113e","input":"len('./archive/CO2 Emissions_Canada.csv')","output":{"0":{"data":{"text/plain":"34"},"exec_count":8,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"ecad12","input":"# Check null values","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"081ec2","input":"### Exploratory Data Analysis","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"4356be","input":"### Import Packages\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"48a089","input":"### Data Overview\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"d39882","input":"Data source: Kaggle\n\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"dbc566","input":"### Data Cleaning\n\n","pos":21,"type":"cell"}
{"id":0,"time":1659367855996,"type":"user"}
{"last_load":1659374011399,"type":"file"}