{"backend_state":"running","connection_file":"/projects/7c08c135-501d-4a5d-8ef1-fb9399dd6cfe/.local/share/jupyter/runtime/kernel-713e516b-b62c-457b-8e7f-3350c0f54f62.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","collapsed":true,"end":1658757143108,"exec_count":14,"id":"33eb7c","input":"# Predicting using SKLearn\ny_hat = linr.predict(x_test)\ny_hat","kernel":"python3-ubuntu","metadata":{"id":"o9ZDJB1qrJ7_"},"output":{"0":{"data":{"text/plain":"array([[17.83968701],\n       [21.785391  ],\n       [ 9.47479456],\n       [23.36367259],\n       [25.73109499],\n       [11.52656063],\n       [19.41796861],\n       [26.52023578],\n       [27.94068922],\n       [30.46593977],\n       [28.88765818],\n       [24.94195419],\n       [27.94068922],\n       [23.83715707],\n       [22.5745318 ],\n       [12.31570143],\n       [32.20204953],\n       [22.25887548],\n       [26.04675131],\n       [28.88765818],\n       [16.57706174],\n       [ 9.94827904],\n       [17.05054621],\n       [13.89398302],\n       [26.36240763],\n       [28.72983002],\n       [26.52023578],\n       [23.36367259],\n       [24.15281339],\n       [27.30937658],\n       [29.36114266],\n       [27.6250329 ],\n       [25.73109499],\n       [23.36367259],\n       [27.30937658],\n       [17.99751517],\n       [24.94195419],\n       [32.67553401],\n       [26.52023578],\n       [28.09851738],\n       [17.05054621],\n       [32.35987769],\n       [21.785391  ],\n       [28.09851738],\n       [26.04675131],\n       [24.15281339],\n       [25.41543867],\n       [20.9962502 ],\n       [26.04675131],\n       [22.5745318 ],\n       [19.57579677],\n       [23.36367259],\n       [29.67679897],\n       [24.15281339],\n       [28.09851738],\n       [28.57200186],\n       [25.73109499],\n       [16.26140542],\n       [31.72856505],\n       [24.46846971],\n       [27.30937658],\n       [29.99245529],\n       [24.62629787],\n       [29.51897082],\n       [24.94195419],\n       [27.30937658],\n       [25.73109499],\n       [21.785391  ],\n       [23.36367259],\n       [25.73109499],\n       [16.26140542],\n       [24.62629787],\n       [19.10231229],\n       [29.2033145 ],\n       [24.94195419],\n       [25.09978235],\n       [29.2033145 ],\n       [13.89398302],\n       [28.09851738]])"},"exec_count":14}},"pos":20,"scrolled":false,"start":1658757143103,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757113906,"exec_count":1,"id":"572b47","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"python3-ubuntu","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"start":1658757112914,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757114177,"exec_count":2,"id":"059ea7","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","kernel":"python3-ubuntu","metadata":{"id":"mBcweiAXW3bC"},"pos":5,"start":1658757113925,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757114214,"exec_count":3,"id":"14cb73","input":"my_data.head()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":3}},"pos":6,"start":1658757114187,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757114233,"exec_count":4,"id":"deda7c","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index) #save length of array of later","kernel":"python3-ubuntu","metadata":{"id":"BYHvay0xa-sK"},"pos":7,"start":1658757114220,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757114690,"exec_count":5,"id":"7b47bb","input":"sns.heatmap(my_data.corr())","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7feb4c336820>"},"exec_count":5},"1":{"data":{"image/png":"0afdb7ea88e663b1d2b006d7c5528ae073007949","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":415,"width":714},"needs_background":"light"}}},"pos":9,"start":1658757114236,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757114700,"exec_count":6,"id":"384bb5","input":"X = my_data[\"horsepower\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","kernel":"python3-ubuntu","metadata":{"id":"WW77IzOwZaKp"},"pos":11,"start":1658757114696,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757114710,"exec_count":7,"id":"8974b1","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n    print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","metadata":{"id":"wKS4pvcEsLOF"},"pos":15,"start":1658757114703,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757115241,"exec_count":8,"id":"1c68c7","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"data":{"image/png":"818e2ddc9c26904a940d1a0ccfff3fb3473b7f1c","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":625},"needs_background":"light"}}},"pos":16,"start":1658757114714,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757115321,"exec_count":9,"id":"b61e2b","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"name":"stdout","text":"[39.93562934] [-0.15782816]\n"}},"pos":18,"start":1658757115247,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757115681,"exec_count":11,"id":"e36785","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"data":{"image/png":"73c51d5999918dc2244da40a486c50b40ec0e95e","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":621},"needs_background":"light"}}},"pos":21,"start":1658757115356,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757115694,"exec_count":12,"id":"882b73","input":"print(linr.score(x_test, y_test))","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","text":"0.5314073184967847\n"}},"pos":23,"start":1658757115691,"state":"done","type":"cell"}
{"cell_type":"code","end":1658757115704,"exec_count":13,"id":"cde277","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"7.188860228046016"},"exec_count":13}},"pos":24,"start":1658757115697,"state":"done","type":"cell"}
{"cell_type":"code","id":"1c8362","input":"","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"113332","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"3464ea","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"377847","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"3a6be1","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"5502a9","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"59740a","input":"### Split the data\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.","metadata":{"id":"g5Zk8_6ksLur"},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"5a609d","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"7da29d","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"838fe0","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n","metadata":{"id":"w78dUshNZarz"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"91e5a3","input":"# Repeat the process!\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? ","metadata":{"id":"2OixzlOot-U6"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"bbac1f","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"d56d47","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"fbc92d","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":12,"type":"cell"}
{"id":0,"time":1658756768996,"type":"user"}
{"last_load":1658498136758,"type":"file"}